
STM32F429I-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d08  0800318c  0800318c  0001318c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08006ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  8 .bss          00000738  20000084  20000084  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200007bc  200007bc  00020084  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015ebe  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003697  00000000  00000000  00035f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000c808  00000000  00000000  00039609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00045e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  00046c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f25  00000000  00000000  00047f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175c1  00000000  00000000  0006ce2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dec58  00000000  00000000  000843ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  00163098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000084 	.word	0x20000084
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003174 	.word	0x08003174

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000088 	.word	0x20000088
 80001e8:	08003174 	.word	0x08003174

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80004f0:	20f0      	movs	r0, #240	; 0xf0
 80004f2:	4770      	bx	lr

080004f4 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80004f4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80004f8:	4770      	bx	lr

080004fa <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 80004fa:	2029      	movs	r0, #41	; 0x29
 80004fc:	f000 ba44 	b.w	8000988 <LCD_IO_WriteReg>

08000500 <ili9341_DisplayOff>:
 8000500:	2028      	movs	r0, #40	; 0x28
 8000502:	f000 ba41 	b.w	8000988 <LCD_IO_WriteReg>

08000506 <ili9341_Init>:
{
 8000506:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000508:	f000 f9c4 	bl	8000894 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 800050c:	20ca      	movs	r0, #202	; 0xca
 800050e:	f000 fa3b 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000512:	20c3      	movs	r0, #195	; 0xc3
 8000514:	f000 fa1c 	bl	8000950 <LCD_IO_WriteData>
 8000518:	2008      	movs	r0, #8
 800051a:	f000 fa19 	bl	8000950 <LCD_IO_WriteData>
 800051e:	2050      	movs	r0, #80	; 0x50
 8000520:	f000 fa16 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000524:	20cf      	movs	r0, #207	; 0xcf
 8000526:	f000 fa2f 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fa10 	bl	8000950 <LCD_IO_WriteData>
 8000530:	20c1      	movs	r0, #193	; 0xc1
 8000532:	f000 fa0d 	bl	8000950 <LCD_IO_WriteData>
 8000536:	2030      	movs	r0, #48	; 0x30
 8000538:	f000 fa0a 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800053c:	20ed      	movs	r0, #237	; 0xed
 800053e:	f000 fa23 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 fa04 	bl	8000950 <LCD_IO_WriteData>
 8000548:	2003      	movs	r0, #3
 800054a:	f000 fa01 	bl	8000950 <LCD_IO_WriteData>
 800054e:	2012      	movs	r0, #18
 8000550:	f000 f9fe 	bl	8000950 <LCD_IO_WriteData>
 8000554:	2081      	movs	r0, #129	; 0x81
 8000556:	f000 f9fb 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800055a:	20e8      	movs	r0, #232	; 0xe8
 800055c:	f000 fa14 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000560:	2085      	movs	r0, #133	; 0x85
 8000562:	f000 f9f5 	bl	8000950 <LCD_IO_WriteData>
 8000566:	2000      	movs	r0, #0
 8000568:	f000 f9f2 	bl	8000950 <LCD_IO_WriteData>
 800056c:	2078      	movs	r0, #120	; 0x78
 800056e:	f000 f9ef 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000572:	20cb      	movs	r0, #203	; 0xcb
 8000574:	f000 fa08 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000578:	2039      	movs	r0, #57	; 0x39
 800057a:	f000 f9e9 	bl	8000950 <LCD_IO_WriteData>
 800057e:	202c      	movs	r0, #44	; 0x2c
 8000580:	f000 f9e6 	bl	8000950 <LCD_IO_WriteData>
 8000584:	2000      	movs	r0, #0
 8000586:	f000 f9e3 	bl	8000950 <LCD_IO_WriteData>
 800058a:	2034      	movs	r0, #52	; 0x34
 800058c:	f000 f9e0 	bl	8000950 <LCD_IO_WriteData>
 8000590:	2002      	movs	r0, #2
 8000592:	f000 f9dd 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000596:	20f7      	movs	r0, #247	; 0xf7
 8000598:	f000 f9f6 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800059c:	2020      	movs	r0, #32
 800059e:	f000 f9d7 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005a2:	20ea      	movs	r0, #234	; 0xea
 80005a4:	f000 f9f0 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 f9d1 	bl	8000950 <LCD_IO_WriteData>
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f9ce 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005b4:	20b1      	movs	r0, #177	; 0xb1
 80005b6:	f000 f9e7 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f9c8 	bl	8000950 <LCD_IO_WriteData>
 80005c0:	201b      	movs	r0, #27
 80005c2:	f000 f9c5 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005c6:	20b6      	movs	r0, #182	; 0xb6
 80005c8:	f000 f9de 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005cc:	200a      	movs	r0, #10
 80005ce:	f000 f9bf 	bl	8000950 <LCD_IO_WriteData>
 80005d2:	20a2      	movs	r0, #162	; 0xa2
 80005d4:	f000 f9bc 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005d8:	20c0      	movs	r0, #192	; 0xc0
 80005da:	f000 f9d5 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005de:	2010      	movs	r0, #16
 80005e0:	f000 f9b6 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e4:	20c1      	movs	r0, #193	; 0xc1
 80005e6:	f000 f9cf 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ea:	2010      	movs	r0, #16
 80005ec:	f000 f9b0 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f0:	20c5      	movs	r0, #197	; 0xc5
 80005f2:	f000 f9c9 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005f6:	2045      	movs	r0, #69	; 0x45
 80005f8:	f000 f9aa 	bl	8000950 <LCD_IO_WriteData>
 80005fc:	2015      	movs	r0, #21
 80005fe:	f000 f9a7 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000602:	20c7      	movs	r0, #199	; 0xc7
 8000604:	f000 f9c0 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000608:	2090      	movs	r0, #144	; 0x90
 800060a:	f000 f9a1 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800060e:	2036      	movs	r0, #54	; 0x36
 8000610:	f000 f9ba 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000614:	20c8      	movs	r0, #200	; 0xc8
 8000616:	f000 f99b 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061a:	20f2      	movs	r0, #242	; 0xf2
 800061c:	f000 f9b4 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f995 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000626:	20b0      	movs	r0, #176	; 0xb0
 8000628:	f000 f9ae 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800062c:	20c2      	movs	r0, #194	; 0xc2
 800062e:	f000 f98f 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000632:	20b6      	movs	r0, #182	; 0xb6
 8000634:	f000 f9a8 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000638:	200a      	movs	r0, #10
 800063a:	f000 f989 	bl	8000950 <LCD_IO_WriteData>
 800063e:	20a7      	movs	r0, #167	; 0xa7
 8000640:	f000 f986 	bl	8000950 <LCD_IO_WriteData>
 8000644:	2027      	movs	r0, #39	; 0x27
 8000646:	f000 f983 	bl	8000950 <LCD_IO_WriteData>
 800064a:	2004      	movs	r0, #4
 800064c:	f000 f980 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000650:	202a      	movs	r0, #42	; 0x2a
 8000652:	f000 f999 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f97a 	bl	8000950 <LCD_IO_WriteData>
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f977 	bl	8000950 <LCD_IO_WriteData>
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f974 	bl	8000950 <LCD_IO_WriteData>
 8000668:	20ef      	movs	r0, #239	; 0xef
 800066a:	f000 f971 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800066e:	202b      	movs	r0, #43	; 0x2b
 8000670:	f000 f98a 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f96b 	bl	8000950 <LCD_IO_WriteData>
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f968 	bl	8000950 <LCD_IO_WriteData>
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f965 	bl	8000950 <LCD_IO_WriteData>
 8000686:	203f      	movs	r0, #63	; 0x3f
 8000688:	f000 f962 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800068c:	20f6      	movs	r0, #246	; 0xf6
 800068e:	f000 f97b 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000692:	2001      	movs	r0, #1
 8000694:	f000 f95c 	bl	8000950 <LCD_IO_WriteData>
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f959 	bl	8000950 <LCD_IO_WriteData>
 800069e:	2006      	movs	r0, #6
 80006a0:	f000 f956 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f000 f96f 	bl	8000988 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80006aa:	20c8      	movs	r0, #200	; 0xc8
 80006ac:	f000 f9be 	bl	8000a2c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80006b0:	2026      	movs	r0, #38	; 0x26
 80006b2:	f000 f969 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f94a 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006bc:	20e0      	movs	r0, #224	; 0xe0
 80006be:	f000 f963 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f000 f944 	bl	8000950 <LCD_IO_WriteData>
 80006c8:	2029      	movs	r0, #41	; 0x29
 80006ca:	f000 f941 	bl	8000950 <LCD_IO_WriteData>
 80006ce:	2024      	movs	r0, #36	; 0x24
 80006d0:	f000 f93e 	bl	8000950 <LCD_IO_WriteData>
 80006d4:	200c      	movs	r0, #12
 80006d6:	f000 f93b 	bl	8000950 <LCD_IO_WriteData>
 80006da:	200e      	movs	r0, #14
 80006dc:	f000 f938 	bl	8000950 <LCD_IO_WriteData>
 80006e0:	2009      	movs	r0, #9
 80006e2:	f000 f935 	bl	8000950 <LCD_IO_WriteData>
 80006e6:	204e      	movs	r0, #78	; 0x4e
 80006e8:	f000 f932 	bl	8000950 <LCD_IO_WriteData>
 80006ec:	2078      	movs	r0, #120	; 0x78
 80006ee:	f000 f92f 	bl	8000950 <LCD_IO_WriteData>
 80006f2:	203c      	movs	r0, #60	; 0x3c
 80006f4:	f000 f92c 	bl	8000950 <LCD_IO_WriteData>
 80006f8:	2009      	movs	r0, #9
 80006fa:	f000 f929 	bl	8000950 <LCD_IO_WriteData>
 80006fe:	2013      	movs	r0, #19
 8000700:	f000 f926 	bl	8000950 <LCD_IO_WriteData>
 8000704:	2005      	movs	r0, #5
 8000706:	f000 f923 	bl	8000950 <LCD_IO_WriteData>
 800070a:	2017      	movs	r0, #23
 800070c:	f000 f920 	bl	8000950 <LCD_IO_WriteData>
 8000710:	2011      	movs	r0, #17
 8000712:	f000 f91d 	bl	8000950 <LCD_IO_WriteData>
 8000716:	2000      	movs	r0, #0
 8000718:	f000 f91a 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800071c:	20e1      	movs	r0, #225	; 0xe1
 800071e:	f000 f933 	bl	8000988 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f914 	bl	8000950 <LCD_IO_WriteData>
 8000728:	2016      	movs	r0, #22
 800072a:	f000 f911 	bl	8000950 <LCD_IO_WriteData>
 800072e:	201b      	movs	r0, #27
 8000730:	f000 f90e 	bl	8000950 <LCD_IO_WriteData>
 8000734:	2004      	movs	r0, #4
 8000736:	f000 f90b 	bl	8000950 <LCD_IO_WriteData>
 800073a:	2011      	movs	r0, #17
 800073c:	f000 f908 	bl	8000950 <LCD_IO_WriteData>
 8000740:	2007      	movs	r0, #7
 8000742:	f000 f905 	bl	8000950 <LCD_IO_WriteData>
 8000746:	2031      	movs	r0, #49	; 0x31
 8000748:	f000 f902 	bl	8000950 <LCD_IO_WriteData>
 800074c:	2033      	movs	r0, #51	; 0x33
 800074e:	f000 f8ff 	bl	8000950 <LCD_IO_WriteData>
 8000752:	2042      	movs	r0, #66	; 0x42
 8000754:	f000 f8fc 	bl	8000950 <LCD_IO_WriteData>
 8000758:	2005      	movs	r0, #5
 800075a:	f000 f8f9 	bl	8000950 <LCD_IO_WriteData>
 800075e:	200c      	movs	r0, #12
 8000760:	f000 f8f6 	bl	8000950 <LCD_IO_WriteData>
 8000764:	200a      	movs	r0, #10
 8000766:	f000 f8f3 	bl	8000950 <LCD_IO_WriteData>
 800076a:	2028      	movs	r0, #40	; 0x28
 800076c:	f000 f8f0 	bl	8000950 <LCD_IO_WriteData>
 8000770:	202f      	movs	r0, #47	; 0x2f
 8000772:	f000 f8ed 	bl	8000950 <LCD_IO_WriteData>
 8000776:	200f      	movs	r0, #15
 8000778:	f000 f8ea 	bl	8000950 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800077c:	2011      	movs	r0, #17
 800077e:	f000 f903 	bl	8000988 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000782:	20c8      	movs	r0, #200	; 0xc8
 8000784:	f000 f952 	bl	8000a2c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000788:	2029      	movs	r0, #41	; 0x29
 800078a:	f000 f8fd 	bl	8000988 <LCD_IO_WriteReg>
}
 800078e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000792:	202c      	movs	r0, #44	; 0x2c
 8000794:	f000 b8f8 	b.w	8000988 <LCD_IO_WriteReg>

08000798 <ili9341_ReadID>:
{
 8000798:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800079a:	f000 f87b 	bl	8000894 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800079e:	2103      	movs	r1, #3
 80007a0:	20d3      	movs	r0, #211	; 0xd3
 80007a2:	f000 f90d 	bl	80009c0 <LCD_IO_ReadData>
}
 80007a6:	b280      	uxth	r0, r0
 80007a8:	bd08      	pop	{r3, pc}
	...

080007ac <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80007ac:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007ae:	4c22      	ldr	r4, [pc, #136]	; (8000838 <SPIx_Init+0x8c>)
{
 80007b0:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007b2:	4620      	mov	r0, r4
 80007b4:	f002 fa63 	bl	8002c7e <HAL_SPI_GetState>
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d13b      	bne.n	8000834 <SPIx_Init+0x88>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SPIx_Init+0x90>)
 80007be:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007c0:	2318      	movs	r3, #24
 80007c2:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80007cc:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007d0:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80007d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007d6:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <SPIx_Init+0x94>)
 80007da:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80007dc:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80007de:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80007e0:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80007e2:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80007e4:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80007e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007ec:	645a      	str	r2, [r3, #68]	; 0x44
 80007ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80007f8:	9002      	str	r0, [sp, #8]
 80007fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007fc:	f042 0220 	orr.w	r2, r2, #32
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f003 0320 	and.w	r3, r3, #32
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800080c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000810:	2302      	movs	r3, #2
 8000812:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000816:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000818:	2001      	movs	r0, #1
 800081a:	2305      	movs	r3, #5
 800081c:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000820:	a903      	add	r1, sp, #12
 8000822:	4808      	ldr	r0, [pc, #32]	; (8000844 <SPIx_Init+0x98>)
 8000824:	f000 ff40 	bl	80016a8 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000828:	4620      	mov	r0, r4
}
 800082a:	b008      	add	sp, #32
 800082c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 8000830:	f001 beaf 	b.w	8002592 <HAL_SPI_Init>
}
 8000834:	b008      	add	sp, #32
 8000836:	bd10      	pop	{r4, pc}
 8000838:	200000a0 	.word	0x200000a0
 800083c:	40015000 	.word	0x40015000
 8000840:	40023800 	.word	0x40023800
 8000844:	40021400 	.word	0x40021400

08000848 <SPIx_Write>:
{
 8000848:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <SPIx_Write+0x28>)
{
 800084c:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <SPIx_Write+0x2c>)
 8000854:	2201      	movs	r2, #1
 8000856:	f10d 0106 	add.w	r1, sp, #6
 800085a:	f001 ff12 	bl	8002682 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 800085e:	b120      	cbz	r0, 800086a <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <SPIx_Write+0x2c>)
 8000862:	f001 fef8 	bl	8002656 <HAL_SPI_DeInit>
  SPIx_Init();
 8000866:	f7ff ffa1 	bl	80007ac <SPIx_Init>
}
 800086a:	b003      	add	sp, #12
 800086c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000870:	20000038 	.word	0x20000038
 8000874:	200000a0 	.word	0x200000a0

08000878 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <BSP_LED_Toggle+0x14>)
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <BSP_LED_Toggle+0x18>)
 800087c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000880:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000884:	6858      	ldr	r0, [r3, #4]
 8000886:	f000 bffa 	b.w	800187e <HAL_GPIO_TogglePin>
 800088a:	bf00      	nop
 800088c:	20000038 	.word	0x20000038
 8000890:	0800318c 	.word	0x0800318c

08000894 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <LCD_IO_Init+0xac>)
 8000898:	f893 50ac 	ldrb.w	r5, [r3, #172]	; 0xac
{
 800089c:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d14b      	bne.n	800093a <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80008a2:	4c28      	ldr	r4, [pc, #160]	; (8000944 <LCD_IO_Init+0xb0>)
 80008a4:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 80008a6:	2601      	movs	r6, #1
 80008a8:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
    LCD_WRX_GPIO_CLK_ENABLE();
 80008ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008ae:	4826      	ldr	r0, [pc, #152]	; (8000948 <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6323      	str	r3, [r4, #48]	; 0x30
 80008b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008b8:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008c0:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 80008c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008c4:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80008c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008ca:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008cc:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008d0:	f000 feea 	bl	80016a8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80008d4:	9501      	str	r5, [sp, #4]
 80008d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6323      	str	r3, [r4, #48]	; 0x30
 80008e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008ea:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008f0:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008f4:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008f8:	f000 fed6 	bl	80016a8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80008fc:	9502      	str	r5, [sp, #8]
 80008fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6323      	str	r3, [r4, #48]	; 0x30
 8000908:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800090e:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 8000910:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000912:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 8000914:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000916:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800091a:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800091e:	f000 fec3 	bl	80016a8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <LCD_IO_Init+0xb8>)
 8000924:	462a      	mov	r2, r5
 8000926:	4621      	mov	r1, r4
 8000928:	f000 ffa4 	bl	8001874 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <LCD_IO_Init+0xb8>)
 800092e:	4632      	mov	r2, r6
 8000930:	4621      	mov	r1, r4
 8000932:	f000 ff9f 	bl	8001874 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000936:	f7ff ff39 	bl	80007ac <SPIx_Init>
  }
}
 800093a:	b009      	add	sp, #36	; 0x24
 800093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093e:	bf00      	nop
 8000940:	200000a0 	.word	0x200000a0
 8000944:	40023800 	.word	0x40023800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020800 	.word	0x40020800

08000950 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000950:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000952:	4d0b      	ldr	r5, [pc, #44]	; (8000980 <LCD_IO_WriteData+0x30>)
{
 8000954:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 8000956:	2201      	movs	r2, #1
 8000958:	480a      	ldr	r0, [pc, #40]	; (8000984 <LCD_IO_WriteData+0x34>)
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	f000 ff89 	bl	8001874 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	4628      	mov	r0, r5
 8000968:	f000 ff84 	bl	8001874 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800096c:	4620      	mov	r0, r4
 800096e:	f7ff ff6b 	bl	8000848 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000972:	4628      	mov	r0, r5
 8000974:	2201      	movs	r2, #1
}
 8000976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800097a:	2104      	movs	r1, #4
 800097c:	f000 bf7a 	b.w	8001874 <HAL_GPIO_WritePin>
 8000980:	40020800 	.word	0x40020800
 8000984:	40020c00 	.word	0x40020c00

08000988 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000988:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800098a:	4d0b      	ldr	r5, [pc, #44]	; (80009b8 <LCD_IO_WriteReg+0x30>)
{
 800098c:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 800098e:	2200      	movs	r2, #0
 8000990:	480a      	ldr	r0, [pc, #40]	; (80009bc <LCD_IO_WriteReg+0x34>)
 8000992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000996:	f000 ff6d 	bl	8001874 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800099a:	2200      	movs	r2, #0
 800099c:	2104      	movs	r1, #4
 800099e:	4628      	mov	r0, r5
 80009a0:	f000 ff68 	bl	8001874 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80009a4:	4620      	mov	r0, r4
 80009a6:	f7ff ff4f 	bl	8000848 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80009aa:	4628      	mov	r0, r5
 80009ac:	2201      	movs	r2, #1
}
 80009ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 80009b2:	2104      	movs	r1, #4
 80009b4:	f000 bf5e 	b.w	8001874 <HAL_GPIO_WritePin>
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80009c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009c2:	4605      	mov	r5, r0
 80009c4:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <LCD_IO_ReadData+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	2104      	movs	r1, #4
 80009cc:	f000 ff52 	bl	8001874 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d6:	4812      	ldr	r0, [pc, #72]	; (8000a20 <LCD_IO_ReadData+0x60>)
 80009d8:	f000 ff4c 	bl	8001874 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80009dc:	4628      	mov	r0, r5
 80009de:	f7ff ff33 	bl	8000848 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <LCD_IO_ReadData+0x64>)
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <LCD_IO_ReadData+0x68>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4622      	mov	r2, r4
 80009ea:	a901      	add	r1, sp, #4
 80009ec:	f002 f85a 	bl	8002aa4 <HAL_SPI_Receive>
  if(status != HAL_OK)
 80009f0:	b120      	cbz	r0, 80009fc <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <LCD_IO_ReadData+0x68>)
 80009f4:	f001 fe2f 	bl	8002656 <HAL_SPI_DeInit>
  SPIx_Init();
 80009f8:	f7ff fed8 	bl	80007ac <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <LCD_IO_ReadData+0x60>)
  return readvalue;
 80009fe:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	f000 ff35 	bl	8001874 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000a0a:	4804      	ldr	r0, [pc, #16]	; (8000a1c <LCD_IO_ReadData+0x5c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2104      	movs	r1, #4
 8000a10:	f000 ff30 	bl	8001874 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8000a14:	4620      	mov	r0, r4
 8000a16:	b003      	add	sp, #12
 8000a18:	bd30      	pop	{r4, r5, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	20000038 	.word	0x20000038
 8000a28:	200000a0 	.word	0x200000a0

08000a2c <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8000a2c:	f000 bbb4 	b.w	8001198 <HAL_Delay>

08000a30 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a34:	4c15      	ldr	r4, [pc, #84]	; (8000a8c <FillBuffer+0x5c>)
{
 8000a36:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8000a3a:	4616      	mov	r6, r2
 8000a3c:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000a3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a42:	2300      	movs	r3, #0
 8000a44:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a4a:	60e3      	str	r3, [r4, #12]
{
 8000a4c:	4680      	mov	r8, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <FillBuffer+0x60>)
 8000a50:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a52:	4620      	mov	r0, r4
{
 8000a54:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a56:	f000 fd1c 	bl	8001492 <HAL_DMA2D_Init>
 8000a5a:	b998      	cbnz	r0, 8000a84 <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000a5c:	4641      	mov	r1, r8
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f000 fdde 	bl	8001620 <HAL_DMA2D_ConfigLayer>
 8000a64:	b970      	cbnz	r0, 8000a84 <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000a66:	9700      	str	r7, [sp, #0]
 8000a68:	4633      	mov	r3, r6
 8000a6a:	462a      	mov	r2, r5
 8000a6c:	4649      	mov	r1, r9
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f000 fd3b 	bl	80014ea <HAL_DMA2D_Start>
 8000a74:	b930      	cbnz	r0, 8000a84 <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a76:	210a      	movs	r1, #10
 8000a78:	4620      	mov	r0, r4
      }
    }
  } 
}
 8000a7a:	b003      	add	sp, #12
 8000a7c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a80:	f000 bd4d 	b.w	800151e <HAL_DMA2D_PollForTransfer>
}
 8000a84:	b003      	add	sp, #12
 8000a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000150 	.word	0x20000150
 8000a90:	4002b000 	.word	0x4002b000

08000a94 <BSP_LCD_GetXSize>:
{
 8000a94:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000a96:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <BSP_LCD_GetXSize+0xc>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	4798      	blx	r3
}
 8000a9e:	bd08      	pop	{r3, pc}
 8000aa0:	20000150 	.word	0x20000150

08000aa4 <BSP_LCD_GetYSize>:
{
 8000aa4:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8000aa6:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <BSP_LCD_GetYSize+0xc>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	4798      	blx	r3
}
 8000aae:	bd08      	pop	{r3, pc}
 8000ab0:	20000150 	.word	0x20000150

08000ab4 <BSP_LCD_LayerDefaultInit>:
{     
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8000ab8:	2400      	movs	r4, #0
{     
 8000aba:	460e      	mov	r6, r1
 8000abc:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 8000abe:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000ac0:	f7ff ffe8 	bl	8000a94 <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8000ac4:	e9cd 0402 	strd	r0, r4, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ac8:	f7ff ffec 	bl	8000aa4 <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 8000acc:	23ff      	movs	r3, #255	; 0xff
  Layercfg.Alpha0 = 0;
 8000ace:	e9cd 3406 	strd	r3, r4, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ad2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000adc:	e9cd 0404 	strd	r0, r4, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 8000ae0:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Backcolor.Blue = 0;
 8000ae2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 8000ae6:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000aea:	f7ff ffd3 	bl	8000a94 <BSP_LCD_GetXSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000aee:	4c0f      	ldr	r4, [pc, #60]	; (8000b2c <BSP_LCD_LayerDefaultInit+0x78>)
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000af0:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000af2:	f7ff ffd7 	bl	8000aa4 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000af6:	f104 0644 	add.w	r6, r4, #68	; 0x44
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000afa:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000afc:	462a      	mov	r2, r5
 8000afe:	a901      	add	r1, sp, #4
 8000b00:	4630      	mov	r0, r6
 8000b02:	f000 ffc5 	bl	8001a90 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000b06:	200c      	movs	r0, #12
 8000b08:	fb00 4005 	mla	r0, r0, r5, r4
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000b16:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000b1a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000b1e:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000b22:	4630      	mov	r0, r6
 8000b24:	f000 ffe2 	bl	8001aec <HAL_LTDC_EnableDither>
}
 8000b28:	b00e      	add	sp, #56	; 0x38
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	20000150 	.word	0x20000150
 8000b30:	2000004c 	.word	0x2000004c

08000b34 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <BSP_LCD_SelectLayer+0x8>)
 8000b36:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000150 	.word	0x20000150

08000b40 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <BSP_LCD_SetTextColor+0x14>)
 8000b42:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000b46:	210c      	movs	r1, #12
 8000b48:	fb01 3302 	mla	r3, r1, r2, r3
 8000b4c:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000150 	.word	0x20000150

08000b58 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <BSP_LCD_SetBackColor+0x14>)
 8000b5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000b5e:	210c      	movs	r1, #12
 8000b60:	fb01 3302 	mla	r3, r1, r2, r3
 8000b64:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000150 	.word	0x20000150

08000b70 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <BSP_LCD_SetFont+0x14>)
 8000b72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000b76:	210c      	movs	r1, #12
 8000b78:	fb01 3302 	mla	r3, r1, r2, r3
 8000b7c:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000150 	.word	0x20000150

08000b88 <BSP_LCD_Clear>:
{ 
 8000b88:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <BSP_LCD_Clear+0x38>)
 8000b8c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 8000b90:	2234      	movs	r2, #52	; 0x34
 8000b92:	fb02 3305 	mla	r3, r2, r5, r3
{ 
 8000b96:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b98:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8000b9c:	9103      	str	r1, [sp, #12]
{ 
 8000b9e:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000ba0:	f7ff ff78 	bl	8000a94 <BSP_LCD_GetXSize>
 8000ba4:	9002      	str	r0, [sp, #8]
 8000ba6:	f7ff ff7d 	bl	8000aa4 <BSP_LCD_GetYSize>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2000      	movs	r0, #0
 8000bae:	9000      	str	r0, [sp, #0]
 8000bb0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8000bb4:	9401      	str	r4, [sp, #4]
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f7ff ff3a 	bl	8000a30 <FillBuffer>
}
 8000bbc:	b005      	add	sp, #20
 8000bbe:	bd30      	pop	{r4, r5, pc}
 8000bc0:	20000150 	.word	0x20000150

08000bc4 <BSP_LCD_FillRect>:
{
 8000bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000bc8:	4c18      	ldr	r4, [pc, #96]	; (8000c2c <BSP_LCD_FillRect+0x68>)
 8000bca:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
 8000bce:	f04f 0a0c 	mov.w	sl, #12
{
 8000bd2:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000bd4:	fb0a 4206 	mla	r2, sl, r6, r4
{
 8000bd8:	b085      	sub	sp, #20
 8000bda:	4605      	mov	r5, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000bdc:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
{
 8000be0:	9303      	str	r3, [sp, #12]
 8000be2:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000be4:	f7ff ffac 	bl	8000b40 <BSP_LCD_SetTextColor>
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000be8:	2234      	movs	r2, #52	; 0x34
 8000bea:	fb02 4606 	mla	r6, r2, r6, r4
 8000bee:	f8d6 80a0 	ldr.w	r8, [r6, #160]	; 0xa0
 8000bf2:	f7ff ff4f 	bl	8000a94 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000bf6:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000bfa:	4683      	mov	fp, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000bfc:	f7ff ff4a 	bl	8000a94 <BSP_LCD_GetXSize>
 8000c00:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8000c04:	9b03      	ldr	r3, [sp, #12]
 8000c06:	fb0a 4402 	mla	r4, sl, r2, r4
 8000c0a:	1bc0      	subs	r0, r0, r7
 8000c0c:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8000c10:	9201      	str	r2, [sp, #4]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000c12:	fb0b 5509 	mla	r5, fp, r9, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000c16:	9000      	str	r0, [sp, #0]
 8000c18:	463a      	mov	r2, r7
 8000c1a:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 8000c1e:	4630      	mov	r0, r6
 8000c20:	f7ff ff06 	bl	8000a30 <FillBuffer>
}
 8000c24:	b005      	add	sp, #20
 8000c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000150 	.word	0x20000150

08000c30 <BSP_LCD_MspInit>:
{
 8000c30:	b530      	push	{r4, r5, lr}
 8000c32:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c34:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c36:	4d4a      	ldr	r5, [pc, #296]	; (8000d60 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c38:	484a      	ldr	r0, [pc, #296]	; (8000d64 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000c3a:	4c4b      	ldr	r4, [pc, #300]	; (8000d68 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	9201      	str	r2, [sp, #4]
 8000c40:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c42:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000c46:	6459      	str	r1, [r3, #68]	; 0x44
 8000c48:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c4a:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8000c4e:	9101      	str	r1, [sp, #4]
 8000c50:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000c52:	9202      	str	r2, [sp, #8]
 8000c54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5a:	6319      	str	r1, [r3, #48]	; 0x30
 8000c5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c5e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8000c62:	9102      	str	r1, [sp, #8]
 8000c64:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	9203      	str	r2, [sp, #12]
 8000c68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c6a:	f041 0101 	orr.w	r1, r1, #1
 8000c6e:	6319      	str	r1, [r3, #48]	; 0x30
 8000c70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c72:	f001 0101 	and.w	r1, r1, #1
 8000c76:	9103      	str	r1, [sp, #12]
 8000c78:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	9204      	str	r2, [sp, #16]
 8000c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c7e:	f041 0102 	orr.w	r1, r1, #2
 8000c82:	6319      	str	r1, [r3, #48]	; 0x30
 8000c84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c86:	f001 0102 	and.w	r1, r1, #2
 8000c8a:	9104      	str	r1, [sp, #16]
 8000c8c:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	9205      	str	r2, [sp, #20]
 8000c90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c92:	f041 0104 	orr.w	r1, r1, #4
 8000c96:	6319      	str	r1, [r3, #48]	; 0x30
 8000c98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c9a:	f001 0104 	and.w	r1, r1, #4
 8000c9e:	9105      	str	r1, [sp, #20]
 8000ca0:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	9206      	str	r2, [sp, #24]
 8000ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ca6:	f041 0108 	orr.w	r1, r1, #8
 8000caa:	6319      	str	r1, [r3, #48]	; 0x30
 8000cac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cae:	f001 0108 	and.w	r1, r1, #8
 8000cb2:	9106      	str	r1, [sp, #24]
 8000cb4:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb6:	9207      	str	r2, [sp, #28]
 8000cb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cba:	f041 0120 	orr.w	r1, r1, #32
 8000cbe:	6319      	str	r1, [r3, #48]	; 0x30
 8000cc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cc2:	f001 0120 	and.w	r1, r1, #32
 8000cc6:	9107      	str	r1, [sp, #28]
 8000cc8:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cca:	9208      	str	r2, [sp, #32]
 8000ccc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cce:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000cd2:	6319      	str	r1, [r3, #48]	; 0x30
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cda:	9308      	str	r3, [sp, #32]
 8000cdc:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000cde:	f641 0158 	movw	r1, #6232	; 0x1858
 8000ce2:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000ce4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000ce8:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000cec:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cee:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000cf0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cf2:	f000 fcd9 	bl	80016a8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000cf6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cfa:	a909      	add	r1, sp, #36	; 0x24
 8000cfc:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000cfe:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d00:	f000 fcd2 	bl	80016a8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000d04:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d08:	a909      	add	r1, sp, #36	; 0x24
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000d0c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d0e:	f000 fccb 	bl	80016a8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000d12:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000d14:	a909      	add	r1, sp, #36	; 0x24
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000d18:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000d1a:	f000 fcc5 	bl	80016a8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000d22:	a909      	add	r1, sp, #36	; 0x24
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000d26:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000d28:	f000 fcbe 	bl	80016a8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000d2c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d30:	a909      	add	r1, sp, #36	; 0x24
 8000d32:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000d34:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d36:	f000 fcb7 	bl	80016a8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d3e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000d40:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d42:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000d44:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d46:	f000 fcaf 	bl	80016a8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d4e:	a909      	add	r1, sp, #36	; 0x24
 8000d50:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d52:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d54:	f000 fca8 	bl	80016a8 <HAL_GPIO_Init>
}
 8000d58:	b00f      	add	sp, #60	; 0x3c
 8000d5a:	bd30      	pop	{r4, r5, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40021400 	.word	0x40021400

08000d78 <BSP_LCD_Init>:
{ 
 8000d78:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 8000d7a:	4c21      	ldr	r4, [pc, #132]	; (8000e00 <BSP_LCD_Init+0x88>)
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <BSP_LCD_Init+0x8c>)
 8000d7e:	6463      	str	r3, [r4, #68]	; 0x44
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000d80:	2109      	movs	r1, #9
 8000d82:	2301      	movs	r3, #1
 8000d84:	e9c4 1316 	strd	r1, r3, [r4, #88]	; 0x58
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000d88:	201d      	movs	r0, #29
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000d90:	f240 150d 	movw	r5, #269	; 0x10d
 8000d94:	f240 1343 	movw	r3, #323	; 0x143
    LtdcHandler.Init.TotalHeigh = 327;
 8000d98:	f240 1c17 	movw	ip, #279	; 0x117
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000d9c:	e9c4 531a 	strd	r5, r3, [r4, #104]	; 0x68
    LtdcHandler.Init.TotalHeigh = 327;
 8000da0:	f240 1347 	movw	r3, #327	; 0x147
 8000da4:	e9c4 c31c 	strd	ip, r3, [r4, #112]	; 0x70
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000da8:	2308      	movs	r3, #8
 8000daa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000db4:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000db6:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000db8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000dbc:	f504 7084 	add.w	r0, r4, #264	; 0x108
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc4:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000dc8:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
    LtdcHandler.Init.Backcolor.Red= 0;
 8000dcc:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000dd0:	f001 f958 	bl	8002084 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dd8:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    BSP_LCD_MspInit();
 8000ddc:	f7ff ff28 	bl	8000c30 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000de0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8000de4:	f000 fde8 	bl	80019b8 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <BSP_LCD_Init+0x90>)
 8000dea:	6423      	str	r3, [r4, #64]	; 0x40
    LcdDrv->Init();
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4798      	blx	r3
    BSP_SDRAM_Init();
 8000df0:	f000 f91e 	bl	8001030 <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <BSP_LCD_Init+0x94>)
 8000df6:	f7ff febb 	bl	8000b70 <BSP_LCD_SetFont>
}  
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	bd38      	pop	{r3, r4, r5, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000150 	.word	0x20000150
 8000e04:	40016800 	.word	0x40016800
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	2000004c 	.word	0x2000004c

08000e10 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000e10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000e14:	4c21      	ldr	r4, [pc, #132]	; (8000e9c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e16:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e1a:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8000e1c:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e20:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e22:	4621      	mov	r1, r4
{
 8000e24:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2a:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e2c:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8000e30:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 8000e34:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e38:	f001 fabc 	bl	80023b4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f000 f9ab 	bl	8001198 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8000e42:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000e44:	4621      	mov	r1, r4
 8000e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4a:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e4c:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8000e50:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 8000e54:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000e58:	f001 faac 	bl	80023b4 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000e5c:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e5e:	4621      	mov	r1, r4
 8000e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e64:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e66:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8000e6a:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e6e:	f001 faa1 	bl	80023b4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000e72:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000e76:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8000e78:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 8000e7a:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e82:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e84:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 8000e88:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e8a:	f001 fa93 	bl	80023b4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8000e8e:	4649      	mov	r1, r9
 8000e90:	4628      	mov	r0, r5
}
 8000e92:	b002      	add	sp, #8
 8000e94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8000e98:	f001 baaa 	b.w	80023f0 <HAL_SDRAM_ProgramRefreshRate>
 8000e9c:	20000288 	.word	0x20000288

08000ea0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8000ea0:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000ea2:	4606      	mov	r6, r0
{
 8000ea4:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	f000 80ad 	beq.w	8001006 <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000eae:	4858      	ldr	r0, [pc, #352]	; (8001010 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	9401      	str	r4, [sp, #4]
 8000eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eb6:	f042 0201 	orr.w	r2, r2, #1
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
 8000ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ebe:	f002 0201 	and.w	r2, r2, #1
 8000ec2:	9201      	str	r2, [sp, #4]
 8000ec4:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8000ec6:	9402      	str	r4, [sp, #8]
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000ed6:	9202      	str	r2, [sp, #8]
 8000ed8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	9403      	str	r4, [sp, #12]
 8000edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ede:	f042 0202 	orr.w	r2, r2, #2
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee6:	f002 0202 	and.w	r2, r2, #2
 8000eea:	9203      	str	r2, [sp, #12]
 8000eec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	9404      	str	r4, [sp, #16]
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef2:	f042 0204 	orr.w	r2, r2, #4
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efa:	f002 0204 	and.w	r2, r2, #4
 8000efe:	9204      	str	r2, [sp, #16]
 8000f00:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	9405      	str	r4, [sp, #20]
 8000f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f06:	f042 0208 	orr.w	r2, r2, #8
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f0e:	f002 0208 	and.w	r2, r2, #8
 8000f12:	9205      	str	r2, [sp, #20]
 8000f14:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f16:	9406      	str	r4, [sp, #24]
 8000f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1a:	f042 0210 	orr.w	r2, r2, #16
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f22:	f002 0210 	and.w	r2, r2, #16
 8000f26:	9206      	str	r2, [sp, #24]
 8000f28:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2a:	9407      	str	r4, [sp, #28]
 8000f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2e:	f042 0220 	orr.w	r2, r2, #32
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
 8000f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f36:	f002 0220 	and.w	r2, r2, #32
 8000f3a:	9207      	str	r2, [sp, #28]
 8000f3c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3e:	9408      	str	r4, [sp, #32]
 8000f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	9308      	str	r3, [sp, #32]
 8000f50:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000f54:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8000f58:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000f5e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000f60:	2360      	movs	r3, #96	; 0x60
 8000f62:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000f64:	f000 fba0 	bl	80016a8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8000f68:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000f6a:	482a      	ldr	r0, [pc, #168]	; (8001014 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8000f6c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000f6e:	a909      	add	r1, sp, #36	; 0x24
 8000f70:	f000 fb9a 	bl	80016a8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8000f74:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f78:	4827      	ldr	r0, [pc, #156]	; (8001018 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8000f7a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f7c:	a909      	add	r1, sp, #36	; 0x24
 8000f7e:	f000 fb93 	bl	80016a8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8000f82:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000f86:	4825      	ldr	r0, [pc, #148]	; (800101c <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8000f88:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000f8a:	a909      	add	r1, sp, #36	; 0x24
 8000f8c:	f000 fb8c 	bl	80016a8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8000f90:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f94:	4822      	ldr	r0, [pc, #136]	; (8001020 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8000f96:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f98:	a909      	add	r1, sp, #36	; 0x24
 8000f9a:	f000 fb85 	bl	80016a8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8000f9e:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000fa2:	4820      	ldr	r0, [pc, #128]	; (8001024 <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8000fa4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000fa6:	a909      	add	r1, sp, #36	; 0x24
 8000fa8:	f000 fb7e 	bl	80016a8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc0:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000fc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8000fc8:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8000fd0:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000fd2:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000fd6:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000fd8:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8000fdc:	4a13      	ldr	r2, [pc, #76]	; (800102c <BSP_SDRAM_MspInit+0x18c>)
 8000fde:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000fe2:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8000fe4:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8000fe6:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000fe8:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8000fea:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 8000fec:	f000 f9e4 	bl	80013b8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	f000 f961 	bl	80012b8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000ff6:	2038      	movs	r0, #56	; 0x38
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f000 f8f2 	bl	80011e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001000:	2038      	movs	r0, #56	; 0x38
 8001002:	f000 f921 	bl	8001248 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001006:	b00e      	add	sp, #56	; 0x38
 8001008:	bd70      	pop	{r4, r5, r6, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	20000288 	.word	0x20000288
 800102c:	40026410 	.word	0x40026410

08001030 <BSP_SDRAM_Init>:
{
 8001030:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001032:	4c1b      	ldr	r4, [pc, #108]	; (80010a0 <BSP_SDRAM_Init+0x70>)
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <BSP_SDRAM_Init+0x74>)
 8001036:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 8001038:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 800103a:	2302      	movs	r3, #2
 800103c:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 800103e:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 8001042:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8001046:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800104a:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 800104c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001050:	2301      	movs	r3, #1
 8001052:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001056:	2010      	movs	r0, #16
 8001058:	2340      	movs	r3, #64	; 0x40
 800105a:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800105e:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001062:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001066:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800106a:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800106e:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001076:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001078:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800107a:	f7ff ff11 	bl	8000ea0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800107e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8001082:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8001086:	f001 f975 	bl	8002374 <HAL_SDRAM_Init>
 800108a:	4c07      	ldr	r4, [pc, #28]	; (80010a8 <BSP_SDRAM_Init+0x78>)
 800108c:	3800      	subs	r0, #0
 800108e:	bf18      	it	ne
 8001090:	2001      	movne	r0, #1
 8001092:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001094:	f240 506a 	movw	r0, #1386	; 0x56a
 8001098:	f7ff feba 	bl	8000e10 <BSP_SDRAM_Initialization_sequence>
}
 800109c:	7820      	ldrb	r0, [r4, #0]
 800109e:	bd10      	pop	{r4, pc}
 80010a0:	20000288 	.word	0x20000288
 80010a4:	a0000140 	.word	0xa0000140
 80010a8:	20000074 	.word	0x20000074

080010ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <SystemInit+0x40>)
 80010ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80010b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <SystemInit+0x44>)
 80010bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010be:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80010c0:	f042 0201 	orr.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80010c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <SystemInit+0x48>)
 80010d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010e0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010e6:	608b      	str	r3, [r1, #8]
#endif
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	40023800 	.word	0x40023800
 80010f4:	24003010 	.word	0x24003010

080010f8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_InitTick+0x3c>)
 8001100:	4e0e      	ldr	r6, [pc, #56]	; (800113c <HAL_InitTick+0x40>)
{
 8001102:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	7830      	ldrb	r0, [r6, #0]
 800110a:	fbb3 f3f0 	udiv	r3, r3, r0
 800110e:	6810      	ldr	r0, [r2, #0]
 8001110:	fbb0 f0f3 	udiv	r0, r0, r3
 8001114:	f000 f8a6 	bl	8001264 <HAL_SYSTICK_Config>
 8001118:	4604      	mov	r4, r0
 800111a:	b950      	cbnz	r0, 8001132 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111c:	2d0f      	cmp	r5, #15
 800111e:	d808      	bhi.n	8001132 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	4602      	mov	r2, r0
 8001122:	4629      	mov	r1, r5
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f85c 	bl	80011e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	6075      	str	r5, [r6, #4]
 800112e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001130:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	e7fc      	b.n	8001130 <HAL_InitTick+0x34>
 8001136:	bf00      	nop
 8001138:	20000078 	.word	0x20000078
 800113c:	2000007c 	.word	0x2000007c

08001140 <HAL_Init>:
{
 8001140:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x30>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800114a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001152:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800115a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f82f 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	200f      	movs	r0, #15
 8001164:	f7ff ffca 	bl	80010fc <HAL_InitTick>
  HAL_MspInit();
 8001168:	f7ff ffc6 	bl	80010f8 <HAL_MspInit>
}
 800116c:	2000      	movs	r0, #0
 800116e:	bd08      	pop	{r3, pc}
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001174:	4a03      	ldr	r2, [pc, #12]	; (8001184 <HAL_IncTick+0x10>)
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_IncTick+0x14>)
 8001178:	6811      	ldr	r1, [r2, #0]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	440b      	add	r3, r1
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200003a8 	.word	0x200003a8
 8001188:	2000007c 	.word	0x2000007c

0800118c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800118c:	4b01      	ldr	r3, [pc, #4]	; (8001194 <HAL_GetTick+0x8>)
 800118e:	6818      	ldr	r0, [r3, #0]
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200003a8 	.word	0x200003a8

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff fff6 	bl	800118c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	bf1c      	itt	ne
 80011a4:	4b05      	ldrne	r3, [pc, #20]	; (80011bc <HAL_Delay+0x24>)
 80011a6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80011aa:	bf18      	it	ne
 80011ac:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	f7ff ffed 	bl	800118c <HAL_GetTick>
 80011b2:	1b43      	subs	r3, r0, r5
 80011b4:	42a3      	cmp	r3, r4
 80011b6:	d3fa      	bcc.n	80011ae <HAL_Delay+0x16>
  {
  }
}
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	2000007c 	.word	0x2000007c

080011c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011c2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80011dc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b530      	push	{r4, r5, lr}
 80011e8:	68dc      	ldr	r4, [r3, #12]
 80011ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ee:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	2d04      	cmp	r5, #4
 80011f6:	bf28      	it	cs
 80011f8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001200:	bf8c      	ite	hi
 8001202:	3c03      	subhi	r4, #3
 8001204:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001206:	fa03 f505 	lsl.w	r5, r3, r5
 800120a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120e:	40a3      	lsls	r3, r4
 8001210:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001216:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	bfac      	ite	ge
 800121e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	4a08      	ldrlt	r2, [pc, #32]	; (8001244 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	bfb8      	it	lt
 800122a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	b2db      	uxtb	r3, r3
 8001230:	bfaa      	itet	ge
 8001232:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800123c:	bd30      	pop	{r4, r5, pc}
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	e000ed14 	.word	0xe000ed14

08001248 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001248:	2800      	cmp	r0, #0
 800124a:	db08      	blt.n	800125e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124c:	0942      	lsrs	r2, r0, #5
 800124e:	2301      	movs	r3, #1
 8001250:	f000 001f 	and.w	r0, r0, #31
 8001254:	fa03 f000 	lsl.w	r0, r3, r0
 8001258:	4b01      	ldr	r3, [pc, #4]	; (8001260 <HAL_NVIC_EnableIRQ+0x18>)
 800125a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100

08001264 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	3801      	subs	r0, #1
 8001266:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800126a:	d20b      	bcs.n	8001284 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	21f0      	movs	r1, #240	; 0xf0
 8001276:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001280:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001282:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001284:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800128c:	6803      	ldr	r3, [r0, #0]
{
 800128e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001290:	4c08      	ldr	r4, [pc, #32]	; (80012b4 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001292:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001294:	b2d9      	uxtb	r1, r3
 8001296:	3910      	subs	r1, #16
 8001298:	2018      	movs	r0, #24
 800129a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800129e:	5c20      	ldrb	r0, [r4, r0]
 80012a0:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012a2:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 80012a6:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 80012aa:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012ac:	bf88      	it	hi
 80012ae:	3004      	addhi	r0, #4
 80012b0:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80012b2:	bd10      	pop	{r4, pc}
 80012b4:	08006e88 	.word	0x08006e88

080012b8 <HAL_DMA_Init>:
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ff66 	bl	800118c <HAL_GetTick>
 80012c0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80012c2:	2c00      	cmp	r4, #0
 80012c4:	d073      	beq.n	80013ae <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80012cc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80012ce:	2300      	movs	r3, #0
 80012d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80012d4:	6813      	ldr	r3, [r2, #0]
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	6821      	ldr	r1, [r4, #0]
 80012de:	680b      	ldr	r3, [r1, #0]
 80012e0:	07d8      	lsls	r0, r3, #31
 80012e2:	d42f      	bmi.n	8001344 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80012e4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e6:	4d33      	ldr	r5, [pc, #204]	; (80013b4 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e8:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012ea:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ec:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	68e2      	ldr	r2, [r4, #12]
 80012f4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	6922      	ldr	r2, [r4, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	6962      	ldr	r2, [r4, #20]
 80012fc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fe:	69e2      	ldr	r2, [r4, #28]
 8001300:	4303      	orrs	r3, r0
 8001302:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001304:	6a22      	ldr	r2, [r4, #32]
 8001306:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001308:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800130a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001310:	bf02      	ittt	eq
 8001312:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001316:	4335      	orreq	r5, r6
 8001318:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800131a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800131c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001320:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001324:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001328:	d133      	bne.n	8001392 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 800132a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800132c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800132e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001330:	b37d      	cbz	r5, 8001392 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001332:	b990      	cbnz	r0, 800135a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001334:	2a01      	cmp	r2, #1
 8001336:	d021      	beq.n	800137c <HAL_DMA_Init+0xc4>
 8001338:	f032 0202 	bics.w	r2, r2, #2
 800133c:	d129      	bne.n	8001392 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800133e:	01ea      	lsls	r2, r5, #7
 8001340:	d527      	bpl.n	8001392 <HAL_DMA_Init+0xda>
 8001342:	e01e      	b.n	8001382 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001344:	f7ff ff22 	bl	800118c <HAL_GetTick>
 8001348:	1b40      	subs	r0, r0, r5
 800134a:	2805      	cmp	r0, #5
 800134c:	d9c6      	bls.n	80012dc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134e:	2320      	movs	r3, #32
 8001350:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001352:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001354:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001358:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800135a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800135e:	d114      	bne.n	800138a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001360:	2a03      	cmp	r2, #3
 8001362:	d816      	bhi.n	8001392 <HAL_DMA_Init+0xda>
 8001364:	a001      	add	r0, pc, #4	; (adr r0, 800136c <HAL_DMA_Init+0xb4>)
 8001366:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800136a:	bf00      	nop
 800136c:	08001383 	.word	0x08001383
 8001370:	0800133f 	.word	0x0800133f
 8001374:	08001383 	.word	0x08001383
 8001378:	0800137d 	.word	0x0800137d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800137c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001380:	d107      	bne.n	8001392 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001386:	2001      	movs	r0, #1
 8001388:	e7e4      	b.n	8001354 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800138a:	2a02      	cmp	r2, #2
 800138c:	d9f9      	bls.n	8001382 <HAL_DMA_Init+0xca>
 800138e:	2a03      	cmp	r2, #3
 8001390:	d0d5      	beq.n	800133e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001392:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff ff79 	bl	800128c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800139a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800139c:	233f      	movs	r3, #63	; 0x3f
 800139e:	4093      	lsls	r3, r2
 80013a0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80013a4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80013a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80013ac:	e7d4      	b.n	8001358 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 80013ae:	2001      	movs	r0, #1
 80013b0:	e7d2      	b.n	8001358 <HAL_DMA_Init+0xa0>
 80013b2:	bf00      	nop
 80013b4:	f010803f 	.word	0xf010803f

080013b8 <HAL_DMA_DeInit>:
{
 80013b8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80013ba:	4605      	mov	r5, r0
 80013bc:	b320      	cbz	r0, 8001408 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80013be:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	b2dc      	uxtb	r4, r3
 80013c6:	d01d      	beq.n	8001404 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80013c8:	6803      	ldr	r3, [r0, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 80013d0:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80013d2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 80013d4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80013d6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80013d8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80013da:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80013dc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80013de:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80013e0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013e2:	f7ff ff53 	bl	800128c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80013e8:	233f      	movs	r3, #63	; 0x3f
 80013ea:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80013ec:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80013f0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80013f4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fa:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80013fc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001400:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8001404:	4620      	mov	r0, r4
 8001406:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001408:	2401      	movs	r4, #1
 800140a:	e7fb      	b.n	8001404 <HAL_DMA_DeInit+0x4c>

0800140c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800140c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800140e:	6804      	ldr	r4, [r0, #0]
 8001410:	9d04      	ldr	r5, [sp, #16]
 8001412:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001414:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001418:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 800141c:	4333      	orrs	r3, r6
 800141e:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001420:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001422:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001424:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001428:	d130      	bne.n	800148c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800142a:	6886      	ldr	r6, [r0, #8]
 800142c:	b11e      	cbz	r6, 8001436 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800142e:	2e01      	cmp	r6, #1
 8001430:	d103      	bne.n	800143a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001432:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001436:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001438:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800143a:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800143c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001440:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001444:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001446:	d107      	bne.n	8001458 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8001448:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 800144a:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800144c:	02db      	lsls	r3, r3, #11
 800144e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8001452:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8001456:	e7ee      	b.n	8001436 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001458:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800145a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800145e:	d10a      	bne.n	8001476 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8001460:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001462:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001464:	0289      	lsls	r1, r1, #10
 8001466:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800146a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 800146e:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001470:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8001474:	e7df      	b.n	8001436 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8001476:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001478:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800147a:	0209      	lsls	r1, r1, #8
 800147c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001480:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8001484:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001486:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800148a:	e7d4      	b.n	8001436 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800148c:	60e1      	str	r1, [r4, #12]
}
 800148e:	e7d3      	b.n	8001438 <DMA2D_SetConfig+0x2c>

08001490 <HAL_DMA2D_MspInit>:
}
 8001490:	4770      	bx	lr

08001492 <HAL_DMA2D_Init>:
{
 8001492:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8001494:	4604      	mov	r4, r0
 8001496:	b330      	cbz	r0, 80014e6 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001498:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800149c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014a0:	b91b      	cbnz	r3, 80014aa <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80014a2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80014a6:	f7ff fff3 	bl	8001490 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80014aa:	6822      	ldr	r2, [r4, #0]
 80014ac:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80014ba:	430b      	orrs	r3, r1
 80014bc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80014be:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80014c0:	68a1      	ldr	r1, [r4, #8]
 80014c2:	f023 0307 	bic.w	r3, r3, #7
 80014c6:	430b      	orrs	r3, r1
 80014c8:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80014ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014cc:	68e1      	ldr	r1, [r4, #12]
 80014ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d6:	430b      	orrs	r3, r1
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80014da:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80014dc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80014de:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80014e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80014e4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
 80014e8:	e7fc      	b.n	80014e4 <HAL_DMA2D_Init+0x52>

080014ea <HAL_DMA2D_Start>:
{
 80014ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80014ec:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 80014f0:	2d01      	cmp	r5, #1
{
 80014f2:	4604      	mov	r4, r0
 80014f4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 80014f8:	d00f      	beq.n	800151a <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80014fa:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80014fe:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001500:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001502:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001506:	9500      	str	r5, [sp, #0]
 8001508:	f7ff ff80 	bl	800140c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	4333      	orrs	r3, r6
 8001512:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001514:	2000      	movs	r0, #0
}
 8001516:	b002      	add	sp, #8
 8001518:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800151a:	4628      	mov	r0, r5
 800151c:	e7fb      	b.n	8001516 <HAL_DMA2D_Start+0x2c>

0800151e <HAL_DMA2D_PollForTransfer>:
{
 800151e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8001520:	2300      	movs	r3, #0
 8001522:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001524:	6803      	ldr	r3, [r0, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	07db      	lsls	r3, r3, #31
{
 800152a:	4604      	mov	r4, r0
 800152c:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800152e:	d417      	bmi.n	8001560 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001536:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001538:	069e      	lsls	r6, r3, #26
 800153a:	d506      	bpl.n	800154a <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 800153c:	f7ff fe26 	bl	800118c <HAL_GetTick>
 8001540:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	06d2      	lsls	r2, r2, #27
 8001548:	d543      	bpl.n	80015d2 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	2212      	movs	r2, #18
 800154e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001550:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001552:	2301      	movs	r3, #1
 8001554:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001558:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800155c:	b002      	add	sp, #8
 800155e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8001560:	f7ff fe14 	bl	800118c <HAL_GetTick>
 8001564:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	0792      	lsls	r2, r2, #30
 800156c:	d4e0      	bmi.n	8001530 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001572:	9a01      	ldr	r2, [sp, #4]
 8001574:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001578:	d017      	beq.n	80015aa <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800157a:	9a01      	ldr	r2, [sp, #4]
 800157c:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800157e:	bf42      	ittt	mi
 8001580:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001582:	f042 0202 	orrmi.w	r2, r2, #2
 8001586:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001588:	9a01      	ldr	r2, [sp, #4]
 800158a:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800158c:	bf42      	ittt	mi
 800158e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001590:	f042 0201 	orrmi.w	r2, r2, #1
 8001594:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001596:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001598:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800159a:	2304      	movs	r3, #4
 800159c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80015a0:	2300      	movs	r3, #0
 80015a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80015a6:	2001      	movs	r0, #1
 80015a8:	e7d8      	b.n	800155c <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 80015aa:	1c69      	adds	r1, r5, #1
 80015ac:	d0dc      	beq.n	8001568 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7ff fded 	bl	800118c <HAL_GetTick>
 80015b2:	1b80      	subs	r0, r0, r6
 80015b4:	42a8      	cmp	r0, r5
 80015b6:	d801      	bhi.n	80015bc <HAL_DMA2D_PollForTransfer+0x9e>
 80015b8:	2d00      	cmp	r5, #0
 80015ba:	d1d4      	bne.n	8001566 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80015bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80015c4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 80015c6:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80015c8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80015cc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80015d0:	e7c4      	b.n	800155c <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80015d6:	9a01      	ldr	r2, [sp, #4]
 80015d8:	f012 0f29 	tst.w	r2, #41	; 0x29
 80015dc:	d016      	beq.n	800160c <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80015de:	9a01      	ldr	r2, [sp, #4]
 80015e0:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80015e2:	bf42      	ittt	mi
 80015e4:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80015e6:	f042 0204 	orrmi.w	r2, r2, #4
 80015ea:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80015ec:	9a01      	ldr	r2, [sp, #4]
 80015ee:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80015f0:	bf42      	ittt	mi
 80015f2:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80015f4:	f042 0202 	orrmi.w	r2, r2, #2
 80015f8:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80015fa:	9a01      	ldr	r2, [sp, #4]
 80015fc:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80015fe:	bf42      	ittt	mi
 8001600:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001602:	f042 0201 	orrmi.w	r2, r2, #1
 8001606:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001608:	2229      	movs	r2, #41	; 0x29
 800160a:	e7c5      	b.n	8001598 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 800160c:	1c69      	adds	r1, r5, #1
 800160e:	d099      	beq.n	8001544 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001610:	f7ff fdbc 	bl	800118c <HAL_GetTick>
 8001614:	1b80      	subs	r0, r0, r6
 8001616:	42a8      	cmp	r0, r5
 8001618:	d8d0      	bhi.n	80015bc <HAL_DMA2D_PollForTransfer+0x9e>
 800161a:	2d00      	cmp	r5, #0
 800161c:	d191      	bne.n	8001542 <HAL_DMA2D_PollForTransfer+0x24>
 800161e:	e7cd      	b.n	80015bc <HAL_DMA2D_PollForTransfer+0x9e>

08001620 <HAL_DMA2D_ConfigLayer>:
{
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8001622:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001626:	2b01      	cmp	r3, #1
 8001628:	f04f 0302 	mov.w	r3, #2
 800162c:	d02b      	beq.n	8001686 <HAL_DMA2D_ConfigLayer+0x66>
 800162e:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001630:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8001634:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001638:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800163c:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8001640:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001642:	4f18      	ldr	r7, [pc, #96]	; (80016a4 <HAL_DMA2D_ConfigLayer+0x84>)
 8001644:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001648:	3c09      	subs	r4, #9
 800164a:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800164c:	bf9c      	itt	ls
 800164e:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8001652:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001654:	ea4f 1601 	mov.w	r6, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001658:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800165a:	bf88      	it	hi
 800165c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001660:	b999      	cbnz	r1, 800168a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001662:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001664:	4039      	ands	r1, r7
 8001666:	430a      	orrs	r2, r1
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800166a:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800166c:	6982      	ldr	r2, [r0, #24]
 800166e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001670:	d803      	bhi.n	800167a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001672:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001674:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800167a:	2301      	movs	r3, #1
 800167c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001680:	2300      	movs	r3, #0
 8001682:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8001686:	4618      	mov	r0, r3
}
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800168a:	69d9      	ldr	r1, [r3, #28]
 800168c:	4039      	ands	r1, r7
 800168e:	430a      	orrs	r2, r1
 8001690:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001692:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001694:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001696:	6992      	ldr	r2, [r2, #24]
 8001698:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800169a:	bf9c      	itt	ls
 800169c:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 80016a0:	621d      	strls	r5, [r3, #32]
 80016a2:	e7ea      	b.n	800167a <HAL_DMA2D_ConfigLayer+0x5a>
 80016a4:	00fcfff0 	.word	0x00fcfff0

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8001870 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b0:	4a6d      	ldr	r2, [pc, #436]	; (8001868 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80016b6:	2401      	movs	r4, #1
 80016b8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80016be:	43ac      	bics	r4, r5
 80016c0:	f040 80b9 	bne.w	8001836 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c4:	684d      	ldr	r5, [r1, #4]
 80016c6:	f005 0403 	and.w	r4, r5, #3
 80016ca:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ce:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016dc:	d834      	bhi.n	8001748 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80016de:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e4:	68cf      	ldr	r7, [r1, #12]
 80016e6:	fa07 f708 	lsl.w	r7, r7, r8
 80016ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80016ee:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016f0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80016fa:	409f      	lsls	r7, r3
 80016fc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001700:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001702:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001704:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001708:	688f      	ldr	r7, [r1, #8]
 800170a:	fa07 f708 	lsl.w	r7, r7, r8
 800170e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001714:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	d119      	bne.n	800174c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001718:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800171c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001720:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001724:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001728:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800172c:	f04f 0e0f 	mov.w	lr, #15
 8001730:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001734:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	690f      	ldr	r7, [r1, #16]
 800173a:	fa07 f70b 	lsl.w	r7, r7, fp
 800173e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001742:	f8ca 7020 	str.w	r7, [sl, #32]
 8001746:	e001      	b.n	800174c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001748:	2c03      	cmp	r4, #3
 800174a:	d1da      	bne.n	8001702 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800174c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001752:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001754:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001756:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800175a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800175c:	d06b      	beq.n	8001836 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	f04f 0a00 	mov.w	sl, #0
 8001762:	f8cd a004 	str.w	sl, [sp, #4]
 8001766:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	4c40      	ldr	r4, [pc, #256]	; (800186c <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001770:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001774:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001778:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800177c:	9601      	str	r6, [sp, #4]
 800177e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001780:	f023 0603 	bic.w	r6, r3, #3
 8001784:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001788:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001790:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001794:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001798:	270f      	movs	r7, #15
 800179a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a4:	d04e      	beq.n	8001844 <HAL_GPIO_Init+0x19c>
 80017a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017aa:	42a0      	cmp	r0, r4
 80017ac:	d04c      	beq.n	8001848 <HAL_GPIO_Init+0x1a0>
 80017ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017b2:	42a0      	cmp	r0, r4
 80017b4:	d04a      	beq.n	800184c <HAL_GPIO_Init+0x1a4>
 80017b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ba:	42a0      	cmp	r0, r4
 80017bc:	d048      	beq.n	8001850 <HAL_GPIO_Init+0x1a8>
 80017be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017c2:	42a0      	cmp	r0, r4
 80017c4:	d046      	beq.n	8001854 <HAL_GPIO_Init+0x1ac>
 80017c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ca:	42a0      	cmp	r0, r4
 80017cc:	d044      	beq.n	8001858 <HAL_GPIO_Init+0x1b0>
 80017ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017d2:	42a0      	cmp	r0, r4
 80017d4:	d042      	beq.n	800185c <HAL_GPIO_Init+0x1b4>
 80017d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017da:	42a0      	cmp	r0, r4
 80017dc:	d040      	beq.n	8001860 <HAL_GPIO_Init+0x1b8>
 80017de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017e2:	42a0      	cmp	r0, r4
 80017e4:	d03e      	beq.n	8001864 <HAL_GPIO_Init+0x1bc>
 80017e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ea:	42a0      	cmp	r0, r4
 80017ec:	bf0c      	ite	eq
 80017ee:	2409      	moveq	r4, #9
 80017f0:	240a      	movne	r4, #10
 80017f2:	fa04 f40e 	lsl.w	r4, r4, lr
 80017f6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80017fa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001800:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001802:	bf54      	ite	pl
 8001804:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001806:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800180a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800180c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001810:	bf54      	ite	pl
 8001812:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001814:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001818:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800181a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800181e:	bf54      	ite	pl
 8001820:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001822:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001826:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001828:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800182c:	bf54      	ite	pl
 800182e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001830:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001834:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	3301      	adds	r3, #1
 8001838:	2b10      	cmp	r3, #16
 800183a:	f47f af3b 	bne.w	80016b4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800183e:	b003      	add	sp, #12
 8001840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001844:	4654      	mov	r4, sl
 8001846:	e7d4      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 8001848:	2401      	movs	r4, #1
 800184a:	e7d2      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 800184c:	2402      	movs	r4, #2
 800184e:	e7d0      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 8001850:	2403      	movs	r4, #3
 8001852:	e7ce      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 8001854:	2404      	movs	r4, #4
 8001856:	e7cc      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 8001858:	2405      	movs	r4, #5
 800185a:	e7ca      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 800185c:	2406      	movs	r4, #6
 800185e:	e7c8      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 8001860:	2407      	movs	r4, #7
 8001862:	e7c6      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 8001864:	2408      	movs	r4, #8
 8001866:	e7c4      	b.n	80017f2 <HAL_GPIO_Init+0x14a>
 8001868:	40013c00 	.word	0x40013c00
 800186c:	40020000 	.word	0x40020000
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	b10a      	cbz	r2, 800187a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001876:	6181      	str	r1, [r0, #24]
  }
}
 8001878:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	0409      	lsls	r1, r1, #16
 800187c:	e7fb      	b.n	8001876 <HAL_GPIO_WritePin+0x2>

0800187e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800187e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001880:	ea01 0203 	and.w	r2, r1, r3
 8001884:	ea21 0103 	bic.w	r1, r1, r3
 8001888:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800188c:	6181      	str	r1, [r0, #24]
}
 800188e:	4770      	bx	lr

08001890 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001892:	6951      	ldr	r1, [r2, #20]
 8001894:	4201      	tst	r1, r0
{
 8001896:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001898:	d002      	beq.n	80018a0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800189c:	f001 fb70 	bl	8002f80 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a0:	bd08      	pop	{r3, pc}
 80018a2:	bf00      	nop
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80018a8:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80018aa:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80018ae:	01d2      	lsls	r2, r2, #7
 80018b0:	3284      	adds	r2, #132	; 0x84
 80018b2:	1883      	adds	r3, r0, r2
{
 80018b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80018b8:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80018ba:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80018bc:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80018be:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80018c2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80018c6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80018c8:	68c5      	ldr	r5, [r0, #12]
 80018ca:	f10c 0701 	add.w	r7, ip, #1
 80018ce:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80018d2:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80018d6:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80018d8:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80018da:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80018de:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80018e0:	68c5      	ldr	r5, [r0, #12]
 80018e2:	68ce      	ldr	r6, [r1, #12]
 80018e4:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80018e8:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80018ea:	689d      	ldr	r5, [r3, #8]
 80018ec:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80018f0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80018f2:	68c7      	ldr	r7, [r0, #12]
 80018f4:	688d      	ldr	r5, [r1, #8]
 80018f6:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80018fa:	3501      	adds	r5, #1
 80018fc:	443d      	add	r5, r7
 80018fe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001902:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001904:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001906:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001908:	f025 0507 	bic.w	r5, r5, #7
 800190c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800190e:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001912:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001914:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001916:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800191a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800191e:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001922:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001926:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800192a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800192e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8001932:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001934:	695d      	ldr	r5, [r3, #20]
 8001936:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800193a:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800193c:	694d      	ldr	r5, [r1, #20]
 800193e:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001940:	69dd      	ldr	r5, [r3, #28]
 8001942:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8001946:	f025 0507 	bic.w	r5, r5, #7
 800194a:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800194c:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8001950:	433d      	orrs	r5, r7
 8001952:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001954:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001956:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001958:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800195c:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800195e:	b31e      	cbz	r6, 80019a8 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001960:	2e01      	cmp	r6, #1
 8001962:	d023      	beq.n	80019ac <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001964:	1eb5      	subs	r5, r6, #2
 8001966:	2d02      	cmp	r5, #2
 8001968:	d922      	bls.n	80019b0 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800196a:	2e07      	cmp	r6, #7
 800196c:	bf0c      	ite	eq
 800196e:	2502      	moveq	r5, #2
 8001970:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001972:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001974:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 8001978:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800197a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800197e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001980:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001982:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001984:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001986:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001988:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800198c:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800198e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001990:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8001994:	f024 0407 	bic.w	r4, r4, #7
 8001998:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800199a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800199c:	5883      	ldr	r3, [r0, r2]
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	5083      	str	r3, [r0, r2]
}
 80019a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80019a8:	2504      	movs	r5, #4
 80019aa:	e7e2      	b.n	8001972 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80019ac:	2503      	movs	r5, #3
 80019ae:	e7e0      	b.n	8001972 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80019b0:	2502      	movs	r5, #2
 80019b2:	e7de      	b.n	8001972 <LTDC_SetConfig+0xca>

080019b4 <HAL_LTDC_MspInit>:
}
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_LTDC_Init>:
{
 80019b8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80019ba:	4604      	mov	r4, r0
 80019bc:	2800      	cmp	r0, #0
 80019be:	d063      	beq.n	8001a88 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80019c0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80019c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019c8:	b91b      	cbnz	r3, 80019d2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80019ca:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80019ce:	f7ff fff1 	bl	80019b4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80019e0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80019e2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80019e6:	4302      	orrs	r2, r0
 80019e8:	68e0      	ldr	r0, [r4, #12]
 80019ea:	6999      	ldr	r1, [r3, #24]
 80019ec:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80019ee:	6920      	ldr	r0, [r4, #16]
 80019f0:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80019f2:	430a      	orrs	r2, r1
 80019f4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4924      	ldr	r1, [pc, #144]	; (8001a8c <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80019fa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80019fc:	400a      	ands	r2, r1
 80019fe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001a06:	69a0      	ldr	r0, [r4, #24]
 8001a08:	4302      	orrs	r2, r0
 8001a0a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001a0c:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001a0e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001a10:	400a      	ands	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001a1a:	6a20      	ldr	r0, [r4, #32]
 8001a1c:	4302      	orrs	r2, r0
 8001a1e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001a20:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001a22:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001a24:	400a      	ands	r2, r1
 8001a26:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001a2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a30:	4302      	orrs	r2, r0
 8001a32:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	4011      	ands	r1, r2
 8001a38:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001a3a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001a3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001a3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001a44:	430a      	orrs	r2, r1
 8001a46:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001a4a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001a4e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001a52:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001a56:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a5a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001a64:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6c:	f042 0206 	orr.w	r2, r2, #6
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001a7a:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001a7c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001a7e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001a82:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
 8001a8a:	e7fc      	b.n	8001a86 <HAL_LTDC_Init+0xce>
 8001a8c:	f000f800 	.word	0xf000f800

08001a90 <HAL_LTDC_ConfigLayer>:
{
 8001a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8001a94:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001a98:	2b01      	cmp	r3, #1
{
 8001a9a:	4606      	mov	r6, r0
 8001a9c:	460f      	mov	r7, r1
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_LTDC_ConfigLayer+0x56>
 8001aa6:	f04f 0801 	mov.w	r8, #1
 8001aaa:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001aae:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ab2:	2434      	movs	r4, #52	; 0x34
 8001ab4:	460d      	mov	r5, r1
 8001ab6:	fb04 6402 	mla	r4, r4, r2, r6
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	3438      	adds	r4, #56	; 0x38
 8001abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001acc:	4630      	mov	r0, r6
 8001ace:	4662      	mov	r2, ip
 8001ad0:	4639      	mov	r1, r7
 8001ad2:	f7ff fee9 	bl	80018a8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001ad6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001ad8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001ada:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001ade:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001ae2:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001aec <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8001aec:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	f04f 0302 	mov.w	r3, #2
 8001af6:	d00c      	beq.n	8001b12 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001afa:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001afe:	6993      	ldr	r3, [r2, #24]
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001b12:	4618      	mov	r0, r3
}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40016800 	.word	0x40016800

08001b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b24:	4d18      	ldr	r5, [pc, #96]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x70>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001b3e:	f7ff fb25 	bl	800118c <HAL_GetTick>
 8001b42:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b44:	686b      	ldr	r3, [r5, #4]
 8001b46:	03da      	lsls	r2, r3, #15
 8001b48:	d50b      	bpl.n	8001b62 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b4c:	4d0e      	ldr	r5, [pc, #56]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b4e:	2201      	movs	r2, #1
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001b52:	f7ff fb1b 	bl	800118c <HAL_GetTick>
 8001b56:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b58:	686b      	ldr	r3, [r5, #4]
 8001b5a:	039b      	lsls	r3, r3, #14
 8001b5c:	d50a      	bpl.n	8001b74 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e006      	b.n	8001b70 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b62:	f7ff fb13 	bl	800118c <HAL_GetTick>
 8001b66:	1b00      	subs	r0, r0, r4
 8001b68:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b6c:	d9ea      	bls.n	8001b44 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8001b6e:	2003      	movs	r0, #3
}
 8001b70:	b003      	add	sp, #12
 8001b72:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b74:	f7ff fb0a 	bl	800118c <HAL_GetTick>
 8001b78:	1b00      	subs	r0, r0, r4
 8001b7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b7e:	d9eb      	bls.n	8001b58 <HAL_PWREx_EnableOverDrive+0x3c>
 8001b80:	e7f5      	b.n	8001b6e <HAL_PWREx_EnableOverDrive+0x52>
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	420e0000 	.word	0x420e0000

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b94:	4604      	mov	r4, r0
 8001b96:	b340      	cbz	r0, 8001bea <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b98:	6803      	ldr	r3, [r0, #0]
 8001b9a:	07dd      	lsls	r5, r3, #31
 8001b9c:	d410      	bmi.n	8001bc0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	0798      	lsls	r0, r3, #30
 8001ba2:	d45e      	bmi.n	8001c62 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	071a      	lsls	r2, r3, #28
 8001ba8:	f100 80a0 	bmi.w	8001cec <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	075b      	lsls	r3, r3, #29
 8001bb0:	f100 80c0 	bmi.w	8001d34 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb4:	69a0      	ldr	r0, [r4, #24]
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	f040 8128 	bne.w	8001e0c <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	e02b      	b.n	8001c18 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bc0:	4b8f      	ldr	r3, [pc, #572]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	f002 020c 	and.w	r2, r2, #12
 8001bc8:	2a04      	cmp	r2, #4
 8001bca:	d007      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bd2:	2a08      	cmp	r2, #8
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	0251      	lsls	r1, r2, #9
 8001bda:	d508      	bpl.n	8001bee <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	039a      	lsls	r2, r3, #14
 8001be2:	d5dc      	bpl.n	8001b9e <HAL_RCC_OscConfig+0xe>
 8001be4:	6863      	ldr	r3, [r4, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1d9      	bne.n	8001b9e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	6862      	ldr	r2, [r4, #4]
 8001bf0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001bf4:	d113      	bne.n	8001c1e <HAL_RCC_OscConfig+0x8e>
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fac5 	bl	800118c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4e7f      	ldr	r6, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001c04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	6833      	ldr	r3, [r6, #0]
 8001c08:	039b      	lsls	r3, r3, #14
 8001c0a:	d4c8      	bmi.n	8001b9e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fabe 	bl	800118c <HAL_GetTick>
 8001c10:	1b40      	subs	r0, r0, r5
 8001c12:	2864      	cmp	r0, #100	; 0x64
 8001c14:	d9f7      	bls.n	8001c06 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8001c16:	2003      	movs	r0, #3
}
 8001c18:	b002      	add	sp, #8
 8001c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	4d78      	ldr	r5, [pc, #480]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c20:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0xa8>
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2c:	602b      	str	r3, [r5, #0]
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c36:	e7e2      	b.n	8001bfe <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	602b      	str	r3, [r5, #0]
 8001c3e:	682b      	ldr	r3, [r5, #0]
 8001c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c44:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	d1d9      	bne.n	8001bfe <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fa9f 	bl	800118c <HAL_GetTick>
 8001c4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	039f      	lsls	r7, r3, #14
 8001c54:	d5a3      	bpl.n	8001b9e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c56:	f7ff fa99 	bl	800118c <HAL_GetTick>
 8001c5a:	1b80      	subs	r0, r0, r6
 8001c5c:	2864      	cmp	r0, #100	; 0x64
 8001c5e:	d9f7      	bls.n	8001c50 <HAL_RCC_OscConfig+0xc0>
 8001c60:	e7d9      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	f012 0f0c 	tst.w	r2, #12
 8001c6a:	d007      	beq.n	8001c7c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c72:	2a08      	cmp	r2, #8
 8001c74:	d111      	bne.n	8001c9a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	025e      	lsls	r6, r3, #9
 8001c7a:	d40e      	bmi.n	8001c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7c:	4a60      	ldr	r2, [pc, #384]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	079d      	lsls	r5, r3, #30
 8001c82:	d502      	bpl.n	8001c8a <HAL_RCC_OscConfig+0xfa>
 8001c84:	68e3      	ldr	r3, [r4, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d1af      	bne.n	8001bea <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	6921      	ldr	r1, [r4, #16]
 8001c8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c96:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	e784      	b.n	8001ba4 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c9a:	68e2      	ldr	r2, [r4, #12]
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c9e:	b1b2      	cbz	r2, 8001cce <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fa72 	bl	800118c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	4d55      	ldr	r5, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001caa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	0798      	lsls	r0, r3, #30
 8001cb0:	d507      	bpl.n	8001cc2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	682b      	ldr	r3, [r5, #0]
 8001cb4:	6922      	ldr	r2, [r4, #16]
 8001cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	e770      	b.n	8001ba4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fa63 	bl	800118c <HAL_GetTick>
 8001cc6:	1b80      	subs	r0, r0, r6
 8001cc8:	2802      	cmp	r0, #2
 8001cca:	d9ef      	bls.n	8001cac <HAL_RCC_OscConfig+0x11c>
 8001ccc:	e7a3      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001cce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fa5c 	bl	800118c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd4:	4e4a      	ldr	r6, [pc, #296]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001cd6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd8:	6833      	ldr	r3, [r6, #0]
 8001cda:	0799      	lsls	r1, r3, #30
 8001cdc:	f57f af62 	bpl.w	8001ba4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fa54 	bl	800118c <HAL_GetTick>
 8001ce4:	1b40      	subs	r0, r0, r5
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9f6      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x148>
 8001cea:	e794      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cec:	6962      	ldr	r2, [r4, #20]
 8001cee:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	b182      	cbz	r2, 8001d14 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fa48 	bl	800118c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfc:	4e40      	ldr	r6, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001cfe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d00:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001d02:	079f      	lsls	r7, r3, #30
 8001d04:	f53f af52 	bmi.w	8001bac <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff fa40 	bl	800118c <HAL_GetTick>
 8001d0c:	1b40      	subs	r0, r0, r5
 8001d0e:	2802      	cmp	r0, #2
 8001d10:	d9f6      	bls.n	8001d00 <HAL_RCC_OscConfig+0x170>
 8001d12:	e780      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001d14:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001d18:	f7ff fa38 	bl	800118c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4e38      	ldr	r6, [pc, #224]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001d1e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001d22:	0798      	lsls	r0, r3, #30
 8001d24:	f57f af42 	bpl.w	8001bac <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fa30 	bl	800118c <HAL_GetTick>
 8001d2c:	1b40      	subs	r0, r0, r5
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d9f6      	bls.n	8001d20 <HAL_RCC_OscConfig+0x190>
 8001d32:	e770      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d38:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001d3c:	d128      	bne.n	8001d90 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	9201      	str	r2, [sp, #4]
 8001d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d52:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4d2c      	ldr	r5, [pc, #176]	; (8001e08 <HAL_RCC_OscConfig+0x278>)
 8001d56:	682b      	ldr	r3, [r5, #0]
 8001d58:	05d9      	lsls	r1, r3, #23
 8001d5a:	d51b      	bpl.n	8001d94 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	68a3      	ldr	r3, [r4, #8]
 8001d5e:	4d28      	ldr	r5, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d127      	bne.n	8001db4 <HAL_RCC_OscConfig+0x224>
 8001d64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fa0e 	bl	800118c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	4e23      	ldr	r6, [pc, #140]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001d72:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d7a:	079b      	lsls	r3, r3, #30
 8001d7c:	d539      	bpl.n	8001df2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	f43f af18 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	e711      	b.n	8001bb4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001d90:	2700      	movs	r7, #0
 8001d92:	e7df      	b.n	8001d54 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f9f6 	bl	800118c <HAL_GetTick>
 8001da0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	682b      	ldr	r3, [r5, #0]
 8001da4:	05da      	lsls	r2, r3, #23
 8001da6:	d4d9      	bmi.n	8001d5c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7ff f9f0 	bl	800118c <HAL_GetTick>
 8001dac:	1b80      	subs	r0, r0, r6
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d9f7      	bls.n	8001da2 <HAL_RCC_OscConfig+0x212>
 8001db2:	e730      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d104      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x232>
 8001db8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	672b      	str	r3, [r5, #112]	; 0x70
 8001dc0:	e7d0      	b.n	8001d64 <HAL_RCC_OscConfig+0x1d4>
 8001dc2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	672a      	str	r2, [r5, #112]	; 0x70
 8001dca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001dcc:	f022 0204 	bic.w	r2, r2, #4
 8001dd0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ca      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f9d9 	bl	800118c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001dde:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001de2:	0798      	lsls	r0, r3, #30
 8001de4:	d5cb      	bpl.n	8001d7e <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff f9d1 	bl	800118c <HAL_GetTick>
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	4540      	cmp	r0, r8
 8001dee:	d9f7      	bls.n	8001de0 <HAL_RCC_OscConfig+0x250>
 8001df0:	e711      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff f9cb 	bl	800118c <HAL_GetTick>
 8001df6:	1b40      	subs	r0, r0, r5
 8001df8:	4540      	cmp	r0, r8
 8001dfa:	d9bd      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1e8>
 8001dfc:	e70b      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	42470000 	.word	0x42470000
 8001e08:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e0c:	4d36      	ldr	r5, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x358>)
 8001e0e:	68ab      	ldr	r3, [r5, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d03d      	beq.n	8001e94 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_OscConfig+0x35c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e20:	d12b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8001e22:	f7ff f9b3 	bl	800118c <HAL_GetTick>
 8001e26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	0199      	lsls	r1, r3, #6
 8001e2c:	d41f      	bmi.n	8001e6e <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e2e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e36:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e42:	0852      	lsrs	r2, r2, #1
 8001e44:	3a01      	subs	r2, #1
 8001e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e4a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4d26      	ldr	r5, [pc, #152]	; (8001ee8 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8001e50:	2201      	movs	r2, #1
 8001e52:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001e54:	f7ff f99a 	bl	800118c <HAL_GetTick>
 8001e58:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	682b      	ldr	r3, [r5, #0]
 8001e5c:	019a      	lsls	r2, r3, #6
 8001e5e:	f53f aead 	bmi.w	8001bbc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff f993 	bl	800118c <HAL_GetTick>
 8001e66:	1b00      	subs	r0, r0, r4
 8001e68:	2802      	cmp	r0, #2
 8001e6a:	d9f6      	bls.n	8001e5a <HAL_RCC_OscConfig+0x2ca>
 8001e6c:	e6d3      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff f98d 	bl	800118c <HAL_GetTick>
 8001e72:	1b80      	subs	r0, r0, r6
 8001e74:	2802      	cmp	r0, #2
 8001e76:	d9d7      	bls.n	8001e28 <HAL_RCC_OscConfig+0x298>
 8001e78:	e6cd      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001e7a:	f7ff f987 	bl	800118c <HAL_GetTick>
 8001e7e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	019b      	lsls	r3, r3, #6
 8001e84:	f57f ae9a 	bpl.w	8001bbc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f980 	bl	800118c <HAL_GetTick>
 8001e8c:	1b00      	subs	r0, r0, r4
 8001e8e:	2802      	cmp	r0, #2
 8001e90:	d9f6      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
 8001e92:	e6c0      	b.n	8001c16 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e94:	2801      	cmp	r0, #1
 8001e96:	f43f aebf 	beq.w	8001c18 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8001e9a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea2:	4291      	cmp	r1, r2
 8001ea4:	f47f aea1 	bne.w	8001bea <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea8:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	428a      	cmp	r2, r1
 8001eb0:	f47f ae9b 	bne.w	8001bea <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001eba:	401a      	ands	r2, r3
 8001ebc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001ec0:	f47f ae93 	bne.w	8001bea <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ec6:	0852      	lsrs	r2, r2, #1
 8001ec8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001ecc:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ece:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001ed2:	f47f ae8a 	bne.w	8001bea <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ed8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001edc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001ee0:	f43f ae6c 	beq.w	8001bbc <HAL_RCC_OscConfig+0x2c>
 8001ee4:	e681      	b.n	8001bea <HAL_RCC_OscConfig+0x5a>
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	42470000 	.word	0x42470000

08001ef0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef0:	4913      	ldr	r1, [pc, #76]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ef2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef4:	688b      	ldr	r3, [r1, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x48>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d11c      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f02:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f04:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0c:	bf14      	ite	ne
 8001f0e:	480d      	ldrne	r0, [pc, #52]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	480d      	ldreq	r0, [pc, #52]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f16:	bf18      	it	ne
 8001f18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	fba1 0100 	umull	r0, r1, r1, r0
 8001f22:	f7fe f963 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x50>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001f32:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f36:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x54>)
 8001f3a:	e7fc      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001f3e:	e7fa      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x46>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	007a1200 	.word	0x007a1200
 8001f48:	00f42400 	.word	0x00f42400

08001f4c <HAL_RCC_ClockConfig>:
{
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f52:	4604      	mov	r4, r0
 8001f54:	b910      	cbnz	r0, 8001f5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
}
 8001f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_RCC_ClockConfig+0x124>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	f002 020f 	and.w	r2, r2, #15
 8001f64:	428a      	cmp	r2, r1
 8001f66:	d328      	bcc.n	8001fba <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	6822      	ldr	r2, [r4, #0]
 8001f6a:	0797      	lsls	r7, r2, #30
 8001f6c:	d42d      	bmi.n	8001fca <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	07d0      	lsls	r0, r2, #31
 8001f70:	d441      	bmi.n	8001ff6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f72:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_RCC_ClockConfig+0x124>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	f002 020f 	and.w	r2, r2, #15
 8001f7a:	42aa      	cmp	r2, r5
 8001f7c:	d866      	bhi.n	800204c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	0751      	lsls	r1, r2, #29
 8001f82:	d46c      	bmi.n	800205e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	0713      	lsls	r3, r2, #28
 8001f86:	d507      	bpl.n	8001f98 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f88:	4a3a      	ldr	r2, [pc, #232]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001f8a:	6921      	ldr	r1, [r4, #16]
 8001f8c:	6893      	ldr	r3, [r2, #8]
 8001f8e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f96:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f98:	f7ff ffaa 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001f9e:	4a36      	ldr	r2, [pc, #216]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	40d8      	lsrs	r0, r3
 8001faa:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_RCC_ClockConfig+0x130>)
 8001fac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_RCC_ClockConfig+0x134>)
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	f7ff f8a3 	bl	80010fc <HAL_InitTick>
  return HAL_OK;
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e7ce      	b.n	8001f58 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d1c6      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xa>
 8001fc8:	e7ce      	b.n	8001f68 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001fcc:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	bf1e      	ittt	ne
 8001fd2:	6899      	ldrne	r1, [r3, #8]
 8001fd4:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001fd8:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	bf42      	ittt	mi
 8001fde:	6899      	ldrmi	r1, [r3, #8]
 8001fe0:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001fe4:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe6:	4923      	ldr	r1, [pc, #140]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001fe8:	68a0      	ldr	r0, [r4, #8]
 8001fea:	688b      	ldr	r3, [r1, #8]
 8001fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff0:	4303      	orrs	r3, r0
 8001ff2:	608b      	str	r3, [r1, #8]
 8001ff4:	e7bb      	b.n	8001f6e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	6862      	ldr	r2, [r4, #4]
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001ffa:	2a01      	cmp	r2, #1
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	d0a7      	beq.n	8001f56 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4e1b      	ldr	r6, [pc, #108]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8002008:	68b3      	ldr	r3, [r6, #8]
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	4313      	orrs	r3, r2
 8002010:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002012:	f7ff f8bb 	bl	800118c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800201a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	68b3      	ldr	r3, [r6, #8]
 800201e:	6862      	ldr	r2, [r4, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002028:	d0a3      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7ff f8af 	bl	800118c <HAL_GetTick>
 800202e:	1bc0      	subs	r0, r0, r7
 8002030:	4540      	cmp	r0, r8
 8002032:	d9f3      	bls.n	800201c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002034:	2003      	movs	r0, #3
 8002036:	e78f      	b.n	8001f58 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002038:	1e91      	subs	r1, r2, #2
 800203a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	d802      	bhi.n	8002046 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002040:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002044:	e7de      	b.n	8002004 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	f013 0f02 	tst.w	r3, #2
 800204a:	e7db      	b.n	8002004 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204c:	b2ea      	uxtb	r2, r5
 800204e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	42ab      	cmp	r3, r5
 8002058:	f47f af7d 	bne.w	8001f56 <HAL_RCC_ClockConfig+0xa>
 800205c:	e78f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205e:	4905      	ldr	r1, [pc, #20]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8002060:	68e0      	ldr	r0, [r4, #12]
 8002062:	688b      	ldr	r3, [r1, #8]
 8002064:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002068:	4303      	orrs	r3, r0
 800206a:	608b      	str	r3, [r1, #8]
 800206c:	e78a      	b.n	8001f84 <HAL_RCC_ClockConfig+0x38>
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00
 8002074:	40023800 	.word	0x40023800
 8002078:	08006e70 	.word	0x08006e70
 800207c:	20000078 	.word	0x20000078
 8002080:	20000080 	.word	0x20000080

08002084 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002084:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002086:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 800208a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800208c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800208e:	f040 808c 	bne.w	80021aa <HAL_RCCEx_PeriphCLKConfig+0x126>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	f013 0f0c 	tst.w	r3, #12
 8002098:	d045      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800209c:	4d8b      	ldr	r5, [pc, #556]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_DISABLE();
 800209e:	2200      	movs	r2, #0
 80020a0:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80020a2:	f7ff f873 	bl	800118c <HAL_GetTick>
 80020a6:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020a8:	682b      	ldr	r3, [r5, #0]
 80020aa:	009f      	lsls	r7, r3, #2
 80020ac:	f100 80cf 	bmi.w	800224e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80020b0:	6821      	ldr	r1, [r4, #0]
 80020b2:	074e      	lsls	r6, r1, #29
 80020b4:	d515      	bpl.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020b6:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020ba:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020be:	061b      	lsls	r3, r3, #24
 80020c0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80020c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020ce:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80020d2:	6a22      	ldr	r2, [r4, #32]
 80020d4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80020d8:	3a01      	subs	r2, #1
 80020da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020de:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020e2:	070d      	lsls	r5, r1, #28
 80020e4:	d514      	bpl.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020e6:	4a79      	ldr	r2, [pc, #484]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80020e8:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020ea:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80020ee:	6920      	ldr	r0, [r4, #16]
 80020f0:	071b      	lsls	r3, r3, #28
 80020f2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80020f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80020fa:	430b      	orrs	r3, r1
 80020fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002100:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002104:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002106:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800210a:	430b      	orrs	r3, r1
 800210c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002110:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002112:	4e6e      	ldr	r6, [pc, #440]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_ENABLE();
 8002114:	2201      	movs	r2, #1
 8002116:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8002118:	f7ff f838 	bl	800118c <HAL_GetTick>
 800211c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800211e:	6833      	ldr	r3, [r6, #0]
 8002120:	0098      	lsls	r0, r3, #2
 8002122:	f140 809b 	bpl.w	800225c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	069b      	lsls	r3, r3, #26
 800212a:	d533      	bpl.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	4b66      	ldr	r3, [pc, #408]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002132:	4d67      	ldr	r5, [pc, #412]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002136:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800214e:	f7ff f81d 	bl	800118c <HAL_GetTick>
 8002152:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	05d9      	lsls	r1, r3, #23
 8002158:	f140 8087 	bpl.w	800226a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800215c:	4d5b      	ldr	r5, [pc, #364]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800215e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002160:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002164:	f040 8088 	bne.w	8002278 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800216a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800216e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002172:	4a56      	ldr	r2, [pc, #344]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002174:	f040 80a4 	bne.w	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8002178:	6891      	ldr	r1, [r2, #8]
 800217a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800217e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002182:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002186:	4301      	orrs	r1, r0
 8002188:	6091      	str	r1, [r2, #8]
 800218a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	430b      	orrs	r3, r1
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800219a:	bf1f      	itttt	ne
 800219c:	4b4d      	ldrne	r3, [pc, #308]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800219e:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 80021a2:	f8c3 21e0 	strne.w	r2, [r3, #480]	; 0x1e0
  }
  return HAL_OK;
 80021a6:	2000      	movne	r0, #0
 80021a8:	e04f      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_PLLI2S_DISABLE();
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021ac:	4e47      	ldr	r6, [pc, #284]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_DISABLE();
 80021ae:	2200      	movs	r2, #0
 80021b0:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80021b2:	f7fe ffeb 	bl	800118c <HAL_GetTick>
 80021b6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021b8:	6833      	ldr	r3, [r6, #0]
 80021ba:	011f      	lsls	r7, r3, #4
 80021bc:	d43f      	bmi.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021be:	6821      	ldr	r1, [r4, #0]
 80021c0:	07cd      	lsls	r5, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80021c2:	bf41      	itttt	mi
 80021c4:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80021c8:	071b      	lslmi	r3, r3, #28
 80021ca:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80021ce:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80021d2:	0788      	lsls	r0, r1, #30
 80021d4:	d515      	bpl.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021d6:	4a3d      	ldr	r2, [pc, #244]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80021d8:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021da:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80021de:	6865      	ldr	r5, [r4, #4]
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80021e6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80021ea:	4303      	orrs	r3, r0
 80021ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021f0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80021f4:	69e3      	ldr	r3, [r4, #28]
 80021f6:	f020 001f 	bic.w	r0, r0, #31
 80021fa:	3b01      	subs	r3, #1
 80021fc:	4303      	orrs	r3, r0
 80021fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002202:	0649      	lsls	r1, r1, #25
 8002204:	d50a      	bpl.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002206:	68e3      	ldr	r3, [r4, #12]
 8002208:	6862      	ldr	r2, [r4, #4]
 800220a:	061b      	lsls	r3, r3, #24
 800220c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002210:	68a2      	ldr	r2, [r4, #8]
 8002212:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002216:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002218:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800221e:	4e2b      	ldr	r6, [pc, #172]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_ENABLE();
 8002220:	2201      	movs	r2, #1
 8002222:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002224:	f7fe ffb2 	bl	800118c <HAL_GetTick>
 8002228:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800222a:	6833      	ldr	r3, [r6, #0]
 800222c:	011a      	lsls	r2, r3, #4
 800222e:	f53f af30 	bmi.w	8002092 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002232:	f7fe ffab 	bl	800118c <HAL_GetTick>
 8002236:	1b40      	subs	r0, r0, r5
 8002238:	2802      	cmp	r0, #2
 800223a:	d9f6      	bls.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800223c:	e004      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800223e:	f7fe ffa5 	bl	800118c <HAL_GetTick>
 8002242:	1b40      	subs	r0, r0, r5
 8002244:	2802      	cmp	r0, #2
 8002246:	d9b7      	bls.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x134>
        return HAL_TIMEOUT;
 8002248:	2003      	movs	r0, #3
}
 800224a:	b003      	add	sp, #12
 800224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800224e:	f7fe ff9d 	bl	800118c <HAL_GetTick>
 8002252:	1b80      	subs	r0, r0, r6
 8002254:	2802      	cmp	r0, #2
 8002256:	f67f af27 	bls.w	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800225a:	e7f5      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800225c:	f7fe ff96 	bl	800118c <HAL_GetTick>
 8002260:	1b40      	subs	r0, r0, r5
 8002262:	2802      	cmp	r0, #2
 8002264:	f67f af5b 	bls.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8002268:	e7ee      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe ff8f 	bl	800118c <HAL_GetTick>
 800226e:	1b80      	subs	r0, r0, r6
 8002270:	2802      	cmp	r0, #2
 8002272:	f67f af6f 	bls.w	8002154 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002276:	e7e7      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002278:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800227a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800227e:	4293      	cmp	r3, r2
 8002280:	f43f af72 	beq.w	8002168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002288:	2101      	movs	r1, #1
 800228a:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002292:	2100      	movs	r1, #0
 8002294:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8002298:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800229a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800229c:	07da      	lsls	r2, r3, #31
 800229e:	f57f af63 	bpl.w	8002168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80022a2:	f7fe ff73 	bl	800118c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80022aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022ae:	079b      	lsls	r3, r3, #30
 80022b0:	f53f af5a 	bmi.w	8002168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7fe ff6a 	bl	800118c <HAL_GetTick>
 80022b8:	1b80      	subs	r0, r0, r6
 80022ba:	42b8      	cmp	r0, r7
 80022bc:	d9f6      	bls.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x228>
 80022be:	e7c3      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c0:	6891      	ldr	r1, [r2, #8]
 80022c2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80022c6:	e75f      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80022c8:	42470000 	.word	0x42470000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42471000 	.word	0x42471000

080022d8 <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 80022d8:	4770      	bx	lr

080022da <HAL_RNG_Init>:
{
 80022da:	b510      	push	{r4, lr}
  if (hrng == NULL)
 80022dc:	4604      	mov	r4, r0
 80022de:	b190      	cbz	r0, 8002306 <HAL_RNG_Init+0x2c>
  if (hrng->State == HAL_RNG_STATE_RESET)
 80022e0:	7943      	ldrb	r3, [r0, #5]
 80022e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022e6:	b913      	cbnz	r3, 80022ee <HAL_RNG_Init+0x14>
    hrng->Lock = HAL_UNLOCKED;
 80022e8:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80022ea:	f7ff fff5 	bl	80022d8 <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 80022ee:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80022f0:	2302      	movs	r3, #2
 80022f2:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	6013      	str	r3, [r2, #0]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80022fc:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 80022fe:	2301      	movs	r3, #1
 8002300:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002302:	60a0      	str	r0, [r4, #8]
}
 8002304:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002306:	2001      	movs	r0, #1
 8002308:	e7fc      	b.n	8002304 <HAL_RNG_Init+0x2a>

0800230a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800230a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800230c:	7903      	ldrb	r3, [r0, #4]
 800230e:	2b01      	cmp	r3, #1
{
 8002310:	4604      	mov	r4, r0
 8002312:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 8002314:	d02b      	beq.n	800236e <HAL_RNG_GenerateRandomNumber+0x64>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002316:	7942      	ldrb	r2, [r0, #5]
  __HAL_LOCK(hrng);
 8002318:	2301      	movs	r3, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 800231a:	429a      	cmp	r2, r3
  __HAL_LOCK(hrng);
 800231c:	7103      	strb	r3, [r0, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 800231e:	b2d5      	uxtb	r5, r2
 8002320:	d121      	bne.n	8002366 <HAL_RNG_GenerateRandomNumber+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002322:	2302      	movs	r3, #2
 8002324:	7143      	strb	r3, [r0, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002326:	f7fe ff31 	bl	800118c <HAL_GetTick>
 800232a:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	07d2      	lsls	r2, r2, #31
 8002332:	d507      	bpl.n	8002344 <HAL_RNG_GenerateRandomNumber+0x3a>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8002338:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800233a:	2301      	movs	r3, #1
 800233c:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2500      	movs	r5, #0
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002340:	2300      	movs	r3, #0
 8002342:	e00d      	b.n	8002360 <HAL_RNG_GenerateRandomNumber+0x56>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002344:	f7fe ff22 	bl	800118c <HAL_GetTick>
 8002348:	1bc0      	subs	r0, r0, r7
 800234a:	2802      	cmp	r0, #2
 800234c:	d9ee      	bls.n	800232c <HAL_RNG_GenerateRandomNumber+0x22>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f013 0301 	ands.w	r3, r3, #1
 8002356:	d1e9      	bne.n	800232c <HAL_RNG_GenerateRandomNumber+0x22>
          hrng->State = HAL_RNG_STATE_READY;
 8002358:	2201      	movs	r2, #1
 800235a:	7162      	strb	r2, [r4, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800235c:	2202      	movs	r2, #2
 800235e:	60a2      	str	r2, [r4, #8]
  __HAL_UNLOCK(hrng);
 8002360:	7123      	strb	r3, [r4, #4]

  return status;
}
 8002362:	4628      	mov	r0, r5
 8002364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002366:	2204      	movs	r2, #4
 8002368:	6082      	str	r2, [r0, #8]
    status = HAL_ERROR;
 800236a:	461d      	mov	r5, r3
 800236c:	e7e8      	b.n	8002340 <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 800236e:	2502      	movs	r5, #2
 8002370:	e7f7      	b.n	8002362 <HAL_RNG_GenerateRandomNumber+0x58>

08002372 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8002372:	4770      	bx	lr

08002374 <HAL_SDRAM_Init>:
{
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8002378:	4604      	mov	r4, r0
 800237a:	b1c8      	cbz	r0, 80023b0 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800237c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002380:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002384:	b91b      	cbnz	r3, 800238e <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8002386:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800238a:	f7ff fff2 	bl	8002372 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800238e:	2302      	movs	r3, #2
 8002390:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002394:	1d21      	adds	r1, r4, #4
 8002396:	6820      	ldr	r0, [r4, #0]
 8002398:	f000 fc74 	bl	8002c84 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800239c:	6862      	ldr	r2, [r4, #4]
 800239e:	6820      	ldr	r0, [r4, #0]
 80023a0:	4629      	mov	r1, r5
 80023a2:	f000 fcaa 	bl	8002cfa <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80023ac:	2000      	movs	r0, #0
}
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80023b0:	2001      	movs	r0, #1
 80023b2:	e7fc      	b.n	80023ae <HAL_SDRAM_Init+0x3a>

080023b4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80023b6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80023ba:	2b02      	cmp	r3, #2
{
 80023bc:	4605      	mov	r5, r0
 80023be:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80023c0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80023c2:	d012      	beq.n	80023ea <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80023c4:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80023c8:	2c01      	cmp	r4, #1
 80023ca:	d10f      	bne.n	80023ec <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80023d2:	6828      	ldr	r0, [r5, #0]
 80023d4:	f000 fcc7 	bl	8002d66 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80023d8:	6833      	ldr	r3, [r6, #0]
 80023da:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80023dc:	bf06      	itte	eq
 80023de:	2305      	moveq	r3, #5
 80023e0:	f885 302c 	strbeq.w	r3, [r5, #44]	; 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80023e4:	f885 402c 	strbne.w	r4, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80023e8:	2000      	movs	r0, #0
}
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
 80023ee:	e7fc      	b.n	80023ea <HAL_SDRAM_SendCommand+0x36>

080023f0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80023f0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80023f2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80023f6:	2b02      	cmp	r3, #2
{
 80023f8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80023fa:	b2d8      	uxtb	r0, r3
 80023fc:	d00d      	beq.n	800241a <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80023fe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8002402:	2b01      	cmp	r3, #1
 8002404:	b2dd      	uxtb	r5, r3
 8002406:	d109      	bne.n	800241c <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002408:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800240a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800240c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002410:	f000 fccf 	bl	8002db2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002414:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002418:	2000      	movs	r0, #0
}
 800241a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800241c:	2001      	movs	r0, #1
 800241e:	e7fc      	b.n	800241a <HAL_SDRAM_ProgramRefreshRate+0x2a>

08002420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002420:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002424:	461f      	mov	r7, r3
 8002426:	4689      	mov	r9, r1
 8002428:	4690      	mov	r8, r2
 800242a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800242c:	f7fe feae 	bl	800118c <HAL_GetTick>
 8002430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002432:	443b      	add	r3, r7
 8002434:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002436:	f7fe fea9 	bl	800118c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800243c:	681e      	ldr	r6, [r3, #0]
 800243e:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8002442:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8002444:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002446:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	6893      	ldr	r3, [r2, #8]
 800244c:	ea39 0303 	bics.w	r3, r9, r3
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	4543      	cmp	r3, r8
 8002458:	d101      	bne.n	800245e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800245a:	2000      	movs	r0, #0
 800245c:	e02e      	b.n	80024bc <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800245e:	1c7b      	adds	r3, r7, #1
 8002460:	d0f3      	beq.n	800244a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002462:	f7fe fe93 	bl	800118c <HAL_GetTick>
 8002466:	eba0 000a 	sub.w	r0, r0, sl
 800246a:	42a8      	cmp	r0, r5
 800246c:	d329      	bcc.n	80024c2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002476:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002478:	6862      	ldr	r2, [r4, #4]
 800247a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800247e:	d10a      	bne.n	8002496 <SPI_WaitFlagStateUntilTimeout+0x76>
 8002480:	68a2      	ldr	r2, [r4, #8]
 8002482:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002486:	d002      	beq.n	800248e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002488:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800248c:	d103      	bne.n	8002496 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002494:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002496:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002498:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800249c:	d107      	bne.n	80024ae <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ac:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80024b4:	2300      	movs	r3, #0
 80024b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 80024ba:	2003      	movs	r0, #3
}
 80024bc:	b002      	add	sp, #8
 80024be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80024c2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80024c4:	2b00      	cmp	r3, #0
      count--;
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80024cc:	bf08      	it	eq
 80024ce:	2500      	moveq	r5, #0
      count--;
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	e7b9      	b.n	8002448 <SPI_WaitFlagStateUntilTimeout+0x28>
 80024d4:	20000078 	.word	0x20000078

080024d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024da:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024dc:	6841      	ldr	r1, [r0, #4]
 80024de:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 80024e2:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e4:	d122      	bne.n	800252c <SPI_EndRxTransaction+0x54>
 80024e6:	6881      	ldr	r1, [r0, #8]
 80024e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80024ec:	d002      	beq.n	80024f4 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ee:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80024f2:	d107      	bne.n	8002504 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024f4:	6825      	ldr	r5, [r4, #0]
 80024f6:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80024f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80024fc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002500:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002502:	d009      	beq.n	8002518 <SPI_EndRxTransaction+0x40>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	2200      	movs	r2, #0
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ff88 	bl	8002420 <SPI_WaitFlagStateUntilTimeout>
 8002510:	b930      	cbnz	r0, 8002520 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002512:	2000      	movs	r0, #0
}
 8002514:	b003      	add	sp, #12
 8002516:	bd30      	pop	{r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002518:	9200      	str	r2, [sp, #0]
 800251a:	2101      	movs	r1, #1
 800251c:	2200      	movs	r2, #0
 800251e:	e7f4      	b.n	800250a <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002520:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002522:	f043 0320 	orr.w	r3, r3, #32
 8002526:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002528:	2003      	movs	r0, #3
 800252a:	e7f3      	b.n	8002514 <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800252c:	9200      	str	r2, [sp, #0]
 800252e:	2101      	movs	r1, #1
 8002530:	2200      	movs	r2, #0
 8002532:	e7eb      	b.n	800250c <SPI_EndRxTransaction+0x34>

08002534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b530      	push	{r4, r5, lr}
 8002536:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002538:	4913      	ldr	r1, [pc, #76]	; (8002588 <SPI_EndRxTxTransaction+0x54>)
 800253a:	680d      	ldr	r5, [r1, #0]
 800253c:	4913      	ldr	r1, [pc, #76]	; (800258c <SPI_EndRxTxTransaction+0x58>)
 800253e:	fbb5 f5f1 	udiv	r5, r5, r1
 8002542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002546:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002548:	6841      	ldr	r1, [r0, #4]
{
 800254a:	b085      	sub	sp, #20
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800254c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8002550:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002552:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002554:	d10c      	bne.n	8002570 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002556:	9200      	str	r2, [sp, #0]
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	2200      	movs	r2, #0
 800255c:	f7ff ff60 	bl	8002420 <SPI_WaitFlagStateUntilTimeout>
 8002560:	b178      	cbz	r0, 8002582 <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002562:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002564:	f043 0320 	orr.w	r3, r3, #32
 8002568:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800256a:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 800256c:	b005      	add	sp, #20
 800256e:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8002570:	9b03      	ldr	r3, [sp, #12]
 8002572:	b133      	cbz	r3, 8002582 <SPI_EndRxTxTransaction+0x4e>
      count--;
 8002574:	9b03      	ldr	r3, [sp, #12]
 8002576:	3b01      	subs	r3, #1
 8002578:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	d4f6      	bmi.n	8002570 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
 8002584:	e7f2      	b.n	800256c <SPI_EndRxTxTransaction+0x38>
 8002586:	bf00      	nop
 8002588:	20000078 	.word	0x20000078
 800258c:	016e3600 	.word	0x016e3600

08002590 <HAL_SPI_MspInit>:
}
 8002590:	4770      	bx	lr

08002592 <HAL_SPI_Init>:
{
 8002592:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8002594:	4604      	mov	r4, r0
 8002596:	2800      	cmp	r0, #0
 8002598:	d05a      	beq.n	8002650 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800259a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800259c:	2b00      	cmp	r3, #0
 800259e:	d153      	bne.n	8002648 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025a0:	6842      	ldr	r2, [r0, #4]
 80025a2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80025a6:	d000      	beq.n	80025aa <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025a8:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80025aa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80025ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025b2:	b923      	cbnz	r3, 80025be <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80025b4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff ffe9 	bl	8002590 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80025be:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025c0:	68a5      	ldr	r5, [r4, #8]
 80025c2:	69a2      	ldr	r2, [r4, #24]
 80025c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80025cc:	680b      	ldr	r3, [r1, #0]
 80025ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025d4:	6863      	ldr	r3, [r4, #4]
 80025d6:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80025da:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80025de:	432b      	orrs	r3, r5
 80025e0:	68e5      	ldr	r5, [r4, #12]
 80025e2:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80025e6:	432b      	orrs	r3, r5
 80025e8:	6925      	ldr	r5, [r4, #16]
 80025ea:	f005 0502 	and.w	r5, r5, #2
 80025ee:	432b      	orrs	r3, r5
 80025f0:	6965      	ldr	r5, [r4, #20]
 80025f2:	f005 0501 	and.w	r5, r5, #1
 80025f6:	432b      	orrs	r3, r5
 80025f8:	f402 7500 	and.w	r5, r2, #512	; 0x200
 80025fc:	432b      	orrs	r3, r5
 80025fe:	69e5      	ldr	r5, [r4, #28]
 8002600:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8002604:	432b      	orrs	r3, r5
 8002606:	6a25      	ldr	r5, [r4, #32]
 8002608:	f005 0580 	and.w	r5, r5, #128	; 0x80
 800260c:	432b      	orrs	r3, r5
 800260e:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8002612:	432b      	orrs	r3, r5
 8002614:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002618:	0c12      	lsrs	r2, r2, #16
 800261a:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800261e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002622:	f002 0204 	and.w	r2, r2, #4
 8002626:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800262a:	bf08      	it	eq
 800262c:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800262e:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002630:	bf08      	it	eq
 8002632:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002634:	69cb      	ldr	r3, [r1, #28]
 8002636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800263a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800263c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800263e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002640:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002642:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002646:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002648:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800264a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800264e:	e7ac      	b.n	80025aa <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002650:	2001      	movs	r0, #1
 8002652:	e7f8      	b.n	8002646 <HAL_SPI_Init+0xb4>

08002654 <HAL_SPI_MspDeInit>:
 8002654:	4770      	bx	lr

08002656 <HAL_SPI_DeInit>:
{
 8002656:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002658:	4604      	mov	r4, r0
 800265a:	b180      	cbz	r0, 800267e <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800265c:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266a:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800266c:	f7ff fff2 	bl	8002654 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002670:	2000      	movs	r0, #0
 8002672:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8002674:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8002678:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 800267c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800267e:	2001      	movs	r0, #1
 8002680:	e7fc      	b.n	800267c <HAL_SPI_DeInit+0x26>

08002682 <HAL_SPI_Transmit>:
{
 8002682:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002686:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002688:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800268c:	2b01      	cmp	r3, #1
{
 800268e:	4604      	mov	r4, r0
 8002690:	460e      	mov	r6, r1
 8002692:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002694:	f000 80b9 	beq.w	800280a <HAL_SPI_Transmit+0x188>
 8002698:	2301      	movs	r3, #1
 800269a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800269e:	f7fe fd75 	bl	800118c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80026a2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80026a6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80026a8:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	f040 80ab 	bne.w	8002806 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80026b0:	2e00      	cmp	r6, #0
 80026b2:	d077      	beq.n	80027a4 <HAL_SPI_Transmit+0x122>
 80026b4:	f1b8 0f00 	cmp.w	r8, #0
 80026b8:	d074      	beq.n	80027a4 <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026ba:	2303      	movs	r3, #3
 80026bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80026c4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80026c8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026cc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026ce:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d2:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80026d4:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026d6:	6326      	str	r6, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80026dc:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e0:	d107      	bne.n	80026f2 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80026e2:	682b      	ldr	r3, [r5, #0]
 80026e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e8:	602b      	str	r3, [r5, #0]
    SPI_1LINE_TX(hspi);
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f0:	602b      	str	r3, [r5, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f8:	d107      	bne.n	800270a <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002700:	602b      	str	r3, [r5, #0]
 8002702:	682b      	ldr	r3, [r5, #0]
 8002704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002708:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800270a:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800270c:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800270e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002710:	bf5e      	ittt	pl
 8002712:	682b      	ldrpl	r3, [r5, #0]
 8002714:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002718:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800271a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271e:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002720:	d14c      	bne.n	80027bc <HAL_SPI_Transmit+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002722:	b113      	cbz	r3, 800272a <HAL_SPI_Transmit+0xa8>
 8002724:	f1b8 0f01 	cmp.w	r8, #1
 8002728:	d107      	bne.n	800273a <HAL_SPI_Transmit+0xb8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800272a:	f836 3b02 	ldrh.w	r3, [r6], #2
 800272e:	60eb      	str	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002730:	6326      	str	r6, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002732:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002734:	3b01      	subs	r3, #1
 8002736:	b29b      	uxth	r3, r3
 8002738:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800273a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800273c:	b29b      	uxth	r3, r3
 800273e:	b9f3      	cbnz	r3, 800277e <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002746:	d104      	bne.n	8002752 <HAL_SPI_Transmit+0xd0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002748:	6822      	ldr	r2, [r4, #0]
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002750:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002752:	464a      	mov	r2, r9
 8002754:	4639      	mov	r1, r7
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff feec 	bl	8002534 <SPI_EndRxTxTransaction>
 800275c:	b108      	cbz	r0, 8002762 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800275e:	2320      	movs	r3, #32
 8002760:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002762:	68a3      	ldr	r3, [r4, #8]
 8002764:	b933      	cbnz	r3, 8002774 <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002774:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002776:	3800      	subs	r0, #0
 8002778:	bf18      	it	ne
 800277a:	2001      	movne	r0, #1
error:
 800277c:	e012      	b.n	80027a4 <HAL_SPI_Transmit+0x122>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800277e:	6822      	ldr	r2, [r4, #0]
 8002780:	6893      	ldr	r3, [r2, #8]
 8002782:	0798      	lsls	r0, r3, #30
 8002784:	d505      	bpl.n	8002792 <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002786:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002788:	f833 1b02 	ldrh.w	r1, [r3], #2
 800278c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800278e:	6323      	str	r3, [r4, #48]	; 0x30
 8002790:	e7cf      	b.n	8002732 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002792:	f7fe fcfb 	bl	800118c <HAL_GetTick>
 8002796:	eba0 0009 	sub.w	r0, r0, r9
 800279a:	42b8      	cmp	r0, r7
 800279c:	d30b      	bcc.n	80027b6 <HAL_SPI_Transmit+0x134>
 800279e:	1c79      	adds	r1, r7, #1
 80027a0:	d0cb      	beq.n	800273a <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 80027a2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027aa:	2300      	movs	r3, #0
 80027ac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80027b0:	b003      	add	sp, #12
 80027b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027b6:	2f00      	cmp	r7, #0
 80027b8:	d1bf      	bne.n	800273a <HAL_SPI_Transmit+0xb8>
 80027ba:	e7f2      	b.n	80027a2 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027bc:	b113      	cbz	r3, 80027c4 <HAL_SPI_Transmit+0x142>
 80027be:	f1b8 0f01 	cmp.w	r8, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_SPI_Transmit+0x154>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c4:	7833      	ldrb	r3, [r6, #0]
 80027c6:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027ca:	3301      	adds	r3, #1
 80027cc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80027ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80027d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0b0      	beq.n	8002740 <HAL_SPI_Transmit+0xbe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	0792      	lsls	r2, r2, #30
 80027e4:	d503      	bpl.n	80027ee <HAL_SPI_Transmit+0x16c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	731a      	strb	r2, [r3, #12]
 80027ec:	e7ec      	b.n	80027c8 <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ee:	f7fe fccd 	bl	800118c <HAL_GetTick>
 80027f2:	eba0 0009 	sub.w	r0, r0, r9
 80027f6:	42b8      	cmp	r0, r7
 80027f8:	d302      	bcc.n	8002800 <HAL_SPI_Transmit+0x17e>
 80027fa:	1c7b      	adds	r3, r7, #1
 80027fc:	d0eb      	beq.n	80027d6 <HAL_SPI_Transmit+0x154>
 80027fe:	e7d0      	b.n	80027a2 <HAL_SPI_Transmit+0x120>
 8002800:	2f00      	cmp	r7, #0
 8002802:	d1e8      	bne.n	80027d6 <HAL_SPI_Transmit+0x154>
 8002804:	e7cd      	b.n	80027a2 <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 8002806:	2002      	movs	r0, #2
 8002808:	e7cc      	b.n	80027a4 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 800280a:	2002      	movs	r0, #2
 800280c:	e7d0      	b.n	80027b0 <HAL_SPI_Transmit+0x12e>

0800280e <HAL_SPI_TransmitReceive>:
{
 800280e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002812:	b085      	sub	sp, #20
 8002814:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 800281a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800281e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8002820:	2b01      	cmp	r3, #1
{
 8002822:	4604      	mov	r4, r0
 8002824:	4688      	mov	r8, r1
 8002826:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8002828:	f000 813a 	beq.w	8002aa0 <HAL_SPI_TransmitReceive+0x292>
 800282c:	2301      	movs	r3, #1
 800282e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002832:	f7fe fcab 	bl	800118c <HAL_GetTick>
  tmp_state           = hspi->State;
 8002836:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800283a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800283c:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800283e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8002840:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002842:	d00a      	beq.n	800285a <HAL_SPI_TransmitReceive+0x4c>
 8002844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002848:	f040 8128 	bne.w	8002a9c <HAL_SPI_TransmitReceive+0x28e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800284c:	68a2      	ldr	r2, [r4, #8]
 800284e:	2a00      	cmp	r2, #0
 8002850:	f040 8124 	bne.w	8002a9c <HAL_SPI_TransmitReceive+0x28e>
 8002854:	2904      	cmp	r1, #4
 8002856:	f040 8121 	bne.w	8002a9c <HAL_SPI_TransmitReceive+0x28e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800285a:	f1b8 0f00 	cmp.w	r8, #0
 800285e:	f000 810f 	beq.w	8002a80 <HAL_SPI_TransmitReceive+0x272>
 8002862:	2d00      	cmp	r5, #0
 8002864:	f000 810c 	beq.w	8002a80 <HAL_SPI_TransmitReceive+0x272>
 8002868:	f1b9 0f00 	cmp.w	r9, #0
 800286c:	f000 8108 	beq.w	8002a80 <HAL_SPI_TransmitReceive+0x272>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002870:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002874:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002876:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002878:	bf1c      	itt	ne
 800287a:	2205      	movne	r2, #5
 800287c:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002880:	2200      	movs	r2, #0
 8002882:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8002884:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002888:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800288a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800288e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    SPI_RESET_CRC(hspi);
 8002892:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferSize  = Size;
 8002894:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002898:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800289c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028a0:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a4:	d107      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 80028a6:	682a      	ldr	r2, [r5, #0]
 80028a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ac:	602a      	str	r2, [r5, #0]
 80028ae:	682a      	ldr	r2, [r5, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	602a      	str	r2, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b6:	682a      	ldr	r2, [r5, #0]
 80028b8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80028ba:	bf5e      	ittt	pl
 80028bc:	682a      	ldrpl	r2, [r5, #0]
 80028be:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80028c2:	602a      	strpl	r2, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028c4:	68e2      	ldr	r2, [r4, #12]
 80028c6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80028ca:	d169      	bne.n	80029a0 <HAL_SPI_TransmitReceive+0x192>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028cc:	b113      	cbz	r3, 80028d4 <HAL_SPI_TransmitReceive+0xc6>
 80028ce:	f1b9 0f01 	cmp.w	r9, #1
 80028d2:	d108      	bne.n	80028e6 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d4:	4641      	mov	r1, r8
 80028d6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80028da:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80028dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028de:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80028e6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b9b3      	cbnz	r3, 800291c <HAL_SPI_TransmitReceive+0x10e>
 80028ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b99b      	cbnz	r3, 800291c <HAL_SPI_TransmitReceive+0x10e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fa:	f040 80ac 	bne.w	8002a56 <HAL_SPI_TransmitReceive+0x248>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80028fe:	2201      	movs	r2, #1
 8002900:	9700      	str	r7, [sp, #0]
 8002902:	4633      	mov	r3, r6
 8002904:	4611      	mov	r1, r2
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff fd8a 	bl	8002420 <SPI_WaitFlagStateUntilTimeout>
 800290c:	2800      	cmp	r0, #0
 800290e:	f000 809e 	beq.w	8002a4e <HAL_SPI_TransmitReceive+0x240>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002912:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6563      	str	r3, [r4, #84]	; 0x54
 800291a:	e020      	b.n	800295e <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800291c:	6822      	ldr	r2, [r4, #0]
 800291e:	6893      	ldr	r3, [r2, #8]
 8002920:	079b      	lsls	r3, r3, #30
 8002922:	d504      	bpl.n	800292e <HAL_SPI_TransmitReceive+0x120>
 8002924:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	b10b      	cbz	r3, 800292e <HAL_SPI_TransmitReceive+0x120>
 800292a:	bb1d      	cbnz	r5, 8002974 <HAL_SPI_TransmitReceive+0x166>
{
 800292c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800292e:	6891      	ldr	r1, [r2, #8]
 8002930:	f011 0101 	ands.w	r1, r1, #1
 8002934:	d00c      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x142>
 8002936:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002938:	b29b      	uxth	r3, r3
 800293a:	b14b      	cbz	r3, 8002950 <HAL_SPI_TransmitReceive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800293c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800293e:	68d2      	ldr	r2, [r2, #12]
 8002940:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002944:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002946:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002948:	3b01      	subs	r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800294e:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002950:	f7fe fc1c 	bl	800118c <HAL_GetTick>
 8002954:	1bc0      	subs	r0, r0, r7
 8002956:	42b0      	cmp	r0, r6
 8002958:	d3c6      	bcc.n	80028e8 <HAL_SPI_TransmitReceive+0xda>
 800295a:	1c70      	adds	r0, r6, #1
 800295c:	d0c4      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0xda>
      errorcode = HAL_TIMEOUT;
 800295e:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002960:	2301      	movs	r3, #1
 8002962:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002966:	2300      	movs	r3, #0
 8002968:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800296c:	4628      	mov	r0, r5
 800296e:	b005      	add	sp, #20
 8002970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002974:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002976:	f833 1b02 	ldrh.w	r1, [r3], #2
 800297a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800297c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800297e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002980:	3b01      	subs	r3, #1
 8002982:	b29b      	uxth	r3, r3
 8002984:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002986:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8002988:	b2ad      	uxth	r5, r5
 800298a:	2d00      	cmp	r5, #0
 800298c:	d1ce      	bne.n	800292c <HAL_SPI_TransmitReceive+0x11e>
 800298e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002994:	d1ca      	bne.n	800292c <HAL_SPI_TransmitReceive+0x11e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002996:	6813      	ldr	r3, [r2, #0]
 8002998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e7c6      	b.n	800292e <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a0:	b113      	cbz	r3, 80029a8 <HAL_SPI_TransmitReceive+0x19a>
 80029a2:	f1b9 0f01 	cmp.w	r9, #1
 80029a6:	d109      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x1ae>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029a8:	f898 3000 	ldrb.w	r3, [r8]
 80029ac:	732b      	strb	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029b0:	3301      	adds	r3, #1
 80029b2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80029b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80029bc:	2501      	movs	r5, #1
 80029be:	e022      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x1f8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c0:	6822      	ldr	r2, [r4, #0]
 80029c2:	6893      	ldr	r3, [r2, #8]
 80029c4:	0799      	lsls	r1, r3, #30
 80029c6:	d504      	bpl.n	80029d2 <HAL_SPI_TransmitReceive+0x1c4>
 80029c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b10b      	cbz	r3, 80029d2 <HAL_SPI_TransmitReceive+0x1c4>
 80029ce:	bb1d      	cbnz	r5, 8002a18 <HAL_SPI_TransmitReceive+0x20a>
        txallowed = 1U;
 80029d0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	6891      	ldr	r1, [r2, #8]
 80029d6:	f011 0101 	ands.w	r1, r1, #1
 80029da:	d00d      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x1ea>
 80029dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b153      	cbz	r3, 80029f8 <HAL_SPI_TransmitReceive+0x1ea>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ea:	3301      	adds	r3, #1
 80029ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80029ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80029f6:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029f8:	f7fe fbc8 	bl	800118c <HAL_GetTick>
 80029fc:	1bc0      	subs	r0, r0, r7
 80029fe:	42b0      	cmp	r0, r6
 8002a00:	d322      	bcc.n	8002a48 <HAL_SPI_TransmitReceive+0x23a>
 8002a02:	1c73      	adds	r3, r6, #1
 8002a04:	d1ab      	bne.n	800295e <HAL_SPI_TransmitReceive+0x150>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1d8      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x1b2>
 8002a0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1d4      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x1b2>
 8002a16:	e76d      	b.n	80028f4 <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002a1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a20:	3301      	adds	r3, #1
 8002a22:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002a24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002a2c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8002a2e:	b2ad      	uxth	r5, r5
 8002a30:	2d00      	cmp	r5, #0
 8002a32:	d1cd      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x1c2>
 8002a34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	d1c9      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x1c2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002a3c:	6822      	ldr	r2, [r4, #0]
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e7c4      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x1c4>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	d1dc      	bne.n	8002a06 <HAL_SPI_TransmitReceive+0x1f8>
 8002a4c:	e787      	b.n	800295e <HAL_SPI_TransmitReceive+0x150>
    tmpreg = READ_REG(hspi->Instance->DR);
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8002a54:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	6895      	ldr	r5, [r2, #8]
 8002a5a:	f015 0510 	ands.w	r5, r5, #16
 8002a5e:	d007      	beq.n	8002a70 <HAL_SPI_TransmitReceive+0x262>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002a60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002a68:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a6c:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8002a6e:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a70:	463a      	mov	r2, r7
 8002a72:	4631      	mov	r1, r6
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff fd5d 	bl	8002534 <SPI_EndRxTxTransaction>
 8002a7a:	b118      	cbz	r0, 8002a84 <HAL_SPI_TransmitReceive+0x276>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002a80:	2501      	movs	r5, #1
 8002a82:	e76d      	b.n	8002960 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a84:	68a3      	ldr	r3, [r4, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f af6a 	bne.w	8002960 <HAL_SPI_TransmitReceive+0x152>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a8c:	9303      	str	r3, [sp, #12]
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	9203      	str	r2, [sp, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	9b03      	ldr	r3, [sp, #12]
 8002a9a:	e761      	b.n	8002960 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_BUSY;
 8002a9c:	2502      	movs	r5, #2
 8002a9e:	e75f      	b.n	8002960 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8002aa0:	2502      	movs	r5, #2
 8002aa2:	e763      	b.n	800296c <HAL_SPI_TransmitReceive+0x15e>

08002aa4 <HAL_SPI_Receive>:
{
 8002aa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002aa8:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002aae:	6843      	ldr	r3, [r0, #4]
 8002ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	4688      	mov	r8, r1
 8002ab8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002aba:	d10c      	bne.n	8002ad6 <HAL_SPI_Receive+0x32>
 8002abc:	6883      	ldr	r3, [r0, #8]
 8002abe:	b953      	cbnz	r3, 8002ad6 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	9500      	str	r5, [sp, #0]
 8002aca:	460a      	mov	r2, r1
 8002acc:	f7ff fe9f 	bl	800280e <HAL_SPI_TransmitReceive>
}
 8002ad0:	b004      	add	sp, #16
 8002ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002ad6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	f000 80cd 	beq.w	8002c7a <HAL_SPI_Receive+0x1d6>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002ae6:	f7fe fb51 	bl	800118c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002aea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002aee:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002af0:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002af2:	b2d8      	uxtb	r0, r3
 8002af4:	f040 80bf 	bne.w	8002c76 <HAL_SPI_Receive+0x1d2>
  if ((pData == NULL) || (Size == 0U))
 8002af8:	f1b8 0f00 	cmp.w	r8, #0
 8002afc:	f000 808a 	beq.w	8002c14 <HAL_SPI_Receive+0x170>
 8002b00:	2f00      	cmp	r7, #0
 8002b02:	f000 8087 	beq.w	8002c14 <HAL_SPI_Receive+0x170>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b08:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0c:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b0e:	2304      	movs	r3, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b14:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 8002b18:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b1c:	6560      	str	r0, [r4, #84]	; 0x54
    SPI_RESET_CRC(hspi);
 8002b1e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002b20:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b22:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b24:	6320      	str	r0, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b26:	86a0      	strh	r0, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b28:	86e0      	strh	r0, [r4, #54]	; 0x36
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b2a:	d10b      	bne.n	8002b44 <HAL_SPI_Receive+0xa0>
    SPI_RESET_CRC(hspi);
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b3a:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 8002b3c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	b292      	uxth	r2, r2
 8002b42:	87e2      	strh	r2, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b44:	68a2      	ldr	r2, [r4, #8]
 8002b46:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002b4a:	d107      	bne.n	8002b5c <HAL_SPI_Receive+0xb8>
    __HAL_SPI_DISABLE(hspi);
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b5a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002b60:	bf5e      	ittt	pl
 8002b62:	681a      	ldrpl	r2, [r3, #0]
 8002b64:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002b68:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b6a:	68e3      	ldr	r3, [r4, #12]
 8002b6c:	b1f3      	cbz	r3, 8002bac <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 8002b6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b1fb      	cbz	r3, 8002bb4 <HAL_SPI_Receive+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	07d1      	lsls	r1, r2, #31
 8002b7a:	d555      	bpl.n	8002c28 <HAL_SPI_Receive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b80:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b84:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002b86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002b8e:	e7ee      	b.n	8002b6e <HAL_SPI_Receive+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	07d7      	lsls	r7, r2, #31
 8002b96:	d535      	bpl.n	8002c04 <HAL_SPI_Receive+0x160>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b9a:	7b1b      	ldrb	r3, [r3, #12]
 8002b9c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002ba4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002bac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ed      	bne.n	8002b90 <HAL_SPI_Receive+0xec>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	d144      	bne.n	8002c46 <HAL_SPI_Receive+0x1a2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	6813      	ldr	r3, [r2, #0]
 8002bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bc4:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	9600      	str	r6, [sp, #0]
 8002bca:	462b      	mov	r3, r5
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff fc26 	bl	8002420 <SPI_WaitFlagStateUntilTimeout>
 8002bd4:	b9e8      	cbnz	r0, 8002c12 <HAL_SPI_Receive+0x16e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bd6:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bdc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002be0:	bf0b      	itete	eq
 8002be2:	68d2      	ldreq	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002be4:	7b12      	ldrbne	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002be6:	801a      	strheq	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002be8:	701a      	strbne	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002bea:	2201      	movs	r2, #1
 8002bec:	9600      	str	r6, [sp, #0]
 8002bee:	462b      	mov	r3, r5
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff fc14 	bl	8002420 <SPI_WaitFlagStateUntilTimeout>
 8002bf8:	b308      	cbz	r0, 8002c3e <HAL_SPI_Receive+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002bfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	6563      	str	r3, [r4, #84]	; 0x54
 8002c02:	e006      	b.n	8002c12 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c04:	f7fe fac2 	bl	800118c <HAL_GetTick>
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	42a8      	cmp	r0, r5
 8002c0c:	d309      	bcc.n	8002c22 <HAL_SPI_Receive+0x17e>
 8002c0e:	1c68      	adds	r0, r5, #1
 8002c10:	d0cc      	beq.n	8002bac <HAL_SPI_Receive+0x108>
      errorcode = HAL_TIMEOUT;
 8002c12:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002c20:	e756      	b.n	8002ad0 <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	d1c2      	bne.n	8002bac <HAL_SPI_Receive+0x108>
 8002c26:	e7f4      	b.n	8002c12 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c28:	f7fe fab0 	bl	800118c <HAL_GetTick>
 8002c2c:	1b80      	subs	r0, r0, r6
 8002c2e:	42a8      	cmp	r0, r5
 8002c30:	d302      	bcc.n	8002c38 <HAL_SPI_Receive+0x194>
 8002c32:	1c6a      	adds	r2, r5, #1
 8002c34:	d09b      	beq.n	8002b6e <HAL_SPI_Receive+0xca>
 8002c36:	e7ec      	b.n	8002c12 <HAL_SPI_Receive+0x16e>
 8002c38:	2d00      	cmp	r5, #0
 8002c3a:	d198      	bne.n	8002b6e <HAL_SPI_Receive+0xca>
 8002c3c:	e7e9      	b.n	8002c12 <HAL_SPI_Receive+0x16e>
    tmpreg = READ_REG(hspi->Instance->DR);
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	9303      	str	r3, [sp, #12]
    UNUSED(tmpreg);
 8002c44:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c46:	4632      	mov	r2, r6
 8002c48:	4629      	mov	r1, r5
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7ff fc44 	bl	80024d8 <SPI_EndRxTransaction>
 8002c50:	b108      	cbz	r0, 8002c56 <HAL_SPI_Receive+0x1b2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c52:	2320      	movs	r3, #32
 8002c54:	6563      	str	r3, [r4, #84]	; 0x54
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002c56:	6822      	ldr	r2, [r4, #0]
 8002c58:	6893      	ldr	r3, [r2, #8]
 8002c5a:	06db      	lsls	r3, r3, #27
 8002c5c:	d506      	bpl.n	8002c6c <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002c5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002c66:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002c6a:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002c6e:	3800      	subs	r0, #0
 8002c70:	bf18      	it	ne
 8002c72:	2001      	movne	r0, #1
error :
 8002c74:	e7ce      	b.n	8002c14 <HAL_SPI_Receive+0x170>
    errorcode = HAL_BUSY;
 8002c76:	2002      	movs	r0, #2
 8002c78:	e7cc      	b.n	8002c14 <HAL_SPI_Receive+0x170>
  __HAL_LOCK(hspi);
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	e728      	b.n	8002ad0 <HAL_SPI_Receive+0x2c>

08002c7e <HAL_SPI_GetState>:
  return hspi->State;
 8002c7e:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002c82:	4770      	bx	lr

08002c84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002c88:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002c8c:	680a      	ldr	r2, [r1, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002c8e:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8002c92:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8002c96:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8002c9a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8002c9e:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002ca0:	b9a2      	cbnz	r2, 8002ccc <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002ca2:	ea43 0209 	orr.w	r2, r3, r9
 8002ca6:	432a      	orrs	r2, r5
 8002ca8:	ea42 0308 	orr.w	r3, r2, r8
 8002cac:	6801      	ldr	r1, [r0, #0]
 8002cae:	ea43 030e 	orr.w	r3, r3, lr
 8002cb2:	ea43 030c 	orr.w	r3, r3, ip
 8002cb6:	433b      	orrs	r3, r7
 8002cb8:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002cbc:	4333      	orrs	r3, r6
 8002cbe:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002ccc:	6802      	ldr	r2, [r0, #0]
 8002cce:	ea43 0309 	orr.w	r3, r3, r9
 8002cd2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8002cda:	ea45 0308 	orr.w	r3, r5, r8
 8002cde:	6842      	ldr	r2, [r0, #4]
 8002ce0:	ea43 030e 	orr.w	r3, r3, lr
 8002ce4:	ea43 030c 	orr.w	r3, r3, ip
 8002ce8:	433b      	orrs	r3, r7
 8002cea:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002cee:	4333      	orrs	r3, r6
 8002cf0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	6043      	str	r3, [r0, #4]
 8002cf8:	e7e5      	b.n	8002cc6 <FMC_SDRAM_Init+0x42>

08002cfa <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002cfa:	68cb      	ldr	r3, [r1, #12]
 8002cfc:	f103 3cff 	add.w	ip, r3, #4294967295
 8002d00:	694b      	ldr	r3, [r1, #20]
{
 8002d02:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002d04:	680f      	ldr	r7, [r1, #0]
 8002d06:	684c      	ldr	r4, [r1, #4]
 8002d08:	688e      	ldr	r6, [r1, #8]
 8002d0a:	690d      	ldr	r5, [r1, #16]
 8002d0c:	6989      	ldr	r1, [r1, #24]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	051b      	lsls	r3, r3, #20
 8002d12:	3c01      	subs	r4, #1
 8002d14:	3e01      	subs	r6, #1
 8002d16:	3d01      	subs	r5, #1
 8002d18:	3901      	subs	r1, #1
 8002d1a:	3f01      	subs	r7, #1
 8002d1c:	0124      	lsls	r4, r4, #4
 8002d1e:	0236      	lsls	r6, r6, #8
 8002d20:	042d      	lsls	r5, r5, #16
 8002d22:	0609      	lsls	r1, r1, #24
 8002d24:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8002d28:	b95a      	cbnz	r2, 8002d42 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002d2a:	433b      	orrs	r3, r7
 8002d2c:	4323      	orrs	r3, r4
 8002d2e:	6882      	ldr	r2, [r0, #8]
 8002d30:	4333      	orrs	r3, r6
 8002d32:	432b      	orrs	r3, r5
 8002d34:	430b      	orrs	r3, r1
 8002d36:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8002d3e:	2000      	movs	r0, #0
 8002d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002d42:	6882      	ldr	r2, [r0, #8]
 8002d44:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d48:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002d50:	ea44 0306 	orr.w	r3, r4, r6
 8002d54:	68c2      	ldr	r2, [r0, #12]
 8002d56:	433b      	orrs	r3, r7
 8002d58:	432b      	orrs	r3, r5
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60c3      	str	r3, [r0, #12]
 8002d64:	e7eb      	b.n	8002d3e <FMC_SDRAM_Timing_Init+0x44>

08002d66 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002d66:	b570      	push	{r4, r5, r6, lr}
 8002d68:	4604      	mov	r4, r0
 8002d6a:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002d6c:	6902      	ldr	r2, [r0, #16]
 8002d6e:	e9d1 3000 	ldrd	r3, r0, [r1]
 8002d72:	4303      	orrs	r3, r0
 8002d74:	68c8      	ldr	r0, [r1, #12]
 8002d76:	0d92      	lsrs	r2, r2, #22
 8002d78:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8002d7c:	0592      	lsls	r2, r2, #22
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	688a      	ldr	r2, [r1, #8]
 8002d82:	3a01      	subs	r2, #1
 8002d84:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002d88:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d8a:	f7fe f9ff 	bl	800118c <HAL_GetTick>
 8002d8e:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002d90:	69a3      	ldr	r3, [r4, #24]
 8002d92:	f013 0320 	ands.w	r3, r3, #32
 8002d96:	d101      	bne.n	8002d9c <FMC_SDRAM_SendCommand+0x36>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d98:	4618      	mov	r0, r3
 8002d9a:	e003      	b.n	8002da4 <FMC_SDRAM_SendCommand+0x3e>
    if (Timeout != HAL_MAX_DELAY)
 8002d9c:	1c6b      	adds	r3, r5, #1
 8002d9e:	d0f7      	beq.n	8002d90 <FMC_SDRAM_SendCommand+0x2a>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002da0:	b90d      	cbnz	r5, 8002da6 <FMC_SDRAM_SendCommand+0x40>
        return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
}
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002da6:	f7fe f9f1 	bl	800118c <HAL_GetTick>
 8002daa:	1b80      	subs	r0, r0, r6
 8002dac:	42a8      	cmp	r0, r5
 8002dae:	d9ef      	bls.n	8002d90 <FMC_SDRAM_SendCommand+0x2a>
 8002db0:	e7f7      	b.n	8002da2 <FMC_SDRAM_SendCommand+0x3c>

08002db2 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002db2:	6943      	ldr	r3, [r0, #20]
 8002db4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002db8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8002dbc:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002dc0:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	4770      	bx	lr
	...

08002dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dce:	e003      	b.n	8002dd8 <LoopCopyDataInit>

08002dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dd6:	3104      	adds	r1, #4

08002dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002de0:	d3f6      	bcc.n	8002dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002de4:	e002      	b.n	8002dec <LoopFillZerobss>

08002de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002de8:	f842 3b04 	str.w	r3, [r2], #4

08002dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002df0:	d3f9      	bcc.n	8002de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002df2:	f7fe f95b 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df6:	f000 f999 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfa:	f000 f80f 	bl	8002e1c <main>
  bx  lr    
 8002dfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002e04:	08006ea4 	.word	0x08006ea4
  ldr  r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e0c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002e10:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8002e14:	200007bc 	.word	0x200007bc

08002e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <ADC_IRQHandler>
	...

08002e1c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{ 
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	b097      	sub	sp, #92	; 0x5c
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e20:	4c46      	ldr	r4, [pc, #280]	; (8002f3c <main+0x120>)
 8002e22:	2500      	movs	r5, #0
  HAL_Init();
 8002e24:	f7fe f98c 	bl	8001140 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	9502      	str	r5, [sp, #8]
 8002e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6423      	str	r3, [r4, #64]	; 0x40
 8002e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_RNG_CLK_ENABLE();
 8002e3c:	9503      	str	r5, [sp, #12]
 8002e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e44:	6363      	str	r3, [r4, #52]	; 0x34
 8002e46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	9303      	str	r3, [sp, #12]
 8002e4e:	9b03      	ldr	r3, [sp, #12]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e50:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <main+0x124>)
 8002e52:	9504      	str	r5, [sp, #16]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	9b04      	ldr	r3, [sp, #16]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e66:	2601      	movs	r6, #1
 8002e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e6c:	2702      	movs	r7, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e6e:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002e76:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e78:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002e7c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002e80:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002e84:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e86:	2307      	movs	r3, #7
 8002e88:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e8a:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002e8c:	f7fe fe80 	bl	8001b90 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 8002e90:	f7fe fe44 	bl	8001b1c <HAL_PWREx_EnableOverDrive>
    
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002e94:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e96:	e9cd 3705 	strd	r3, r7, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002e9a:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea2:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002ea6:	a805      	add	r0, sp, #20
 8002ea8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eaa:	9507      	str	r5, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002eac:	f7ff f84e 	bl	8001f4c <HAL_RCC_ClockConfig>
  BSP_LCD_Init();
 8002eb0:	f7fd ff62 	bl	8000d78 <BSP_LCD_Init>
  __HAL_RCC_RNG_CLK_ENABLE();
 8002eb4:	9505      	str	r5, [sp, #20]
 8002eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8002ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
  rng_inst.Instance = RNG;
 8002ec0:	4c20      	ldr	r4, [pc, #128]	; (8002f44 <main+0x128>)
  __HAL_RCC_RNG_CLK_ENABLE();
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	9305      	str	r3, [sp, #20]
 8002ec8:	9b05      	ldr	r3, [sp, #20]
  rng_inst.Instance = RNG;
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <main+0x12c>)
 8002ecc:	6023      	str	r3, [r4, #0]
  if (HAL_RNG_Init(&rng_inst) != HAL_OK)
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7ff fa03 	bl	80022da <HAL_RNG_Init>
 8002ed4:	bb50      	cbnz	r0, 8002f2c <main+0x110>
  uint32_t rnd = 0xff;
 8002ed6:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RNG_GenerateRandomNumber(&rng_inst, &rnd) != HAL_OK)
 8002ed8:	a90a      	add	r1, sp, #40	; 0x28
 8002eda:	4620      	mov	r0, r4
  uint32_t rnd = 0xff;
 8002edc:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RNG_GenerateRandomNumber(&rng_inst, &rnd) != HAL_OK)
 8002ede:	f7ff fa14 	bl	800230a <HAL_RNG_GenerateRandomNumber>
 8002ee2:	bb38      	cbnz	r0, 8002f34 <main+0x118>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8002ee4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f7fd fde3 	bl	8000ab4 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f7fd fe20 	bl	8000b34 <BSP_LCD_SelectLayer>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ef4:	4815      	ldr	r0, [pc, #84]	; (8002f4c <main+0x130>)
 8002ef6:	f7fd fe3b 	bl	8000b70 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	f7fd fe2b 	bl	8000b58 <BSP_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002f02:	f04f 30ff 	mov.w	r0, #4294967295
 8002f06:	f7fd fe3f 	bl	8000b88 <BSP_LCD_Clear>
    Maze_Generate(maze, 10, 12, &rng_inst);
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	220c      	movs	r2, #12
 8002f0e:	210a      	movs	r1, #10
 8002f10:	f104 0010 	add.w	r0, r4, #16
 8002f14:	f000 f8b8 	bl	8003088 <Maze_Generate>
    Maze_Display(maze, 10, 11, 20, LCD_COLOR_RED);
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <main+0x134>)
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	220b      	movs	r2, #11
 8002f1e:	2314      	movs	r3, #20
 8002f20:	210a      	movs	r1, #10
 8002f22:	f104 0010 	add.w	r0, r4, #16
 8002f26:	f000 f833 	bl	8002f90 <Maze_Display>
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <main+0x10e>
	  return 0xffffffff;
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002f30:	b017      	add	sp, #92	; 0x5c
 8002f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  return 0xfffffffE;
 8002f34:	f06f 0001 	mvn.w	r0, #1
 8002f38:	e7fa      	b.n	8002f30 <main+0x114>
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40007000 	.word	0x40007000
 8002f44:	200003ac 	.word	0x200003ac
 8002f48:	50060800 	.word	0x50060800
 8002f4c:	2000004c 	.word	0x2000004c
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <Toggle_Leds>:
  * @brief  Toggle LEDs
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8002f54:	b510      	push	{r4, lr}
  static uint8_t ticks = 0;
  
  if(ticks++ > 100)
 8002f56:	4c09      	ldr	r4, [pc, #36]	; (8002f7c <Toggle_Leds+0x28>)
 8002f58:	f894 340c 	ldrb.w	r3, [r4, #1036]	; 0x40c
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	f884 240c 	strb.w	r2, [r4, #1036]	; 0x40c
 8002f64:	d908      	bls.n	8002f78 <Toggle_Leds+0x24>
  {
    BSP_LED_Toggle(LED3);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fd fc86 	bl	8000878 <BSP_LED_Toggle>
    BSP_LED_Toggle(LED4);
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f7fd fc83 	bl	8000878 <BSP_LED_Toggle>
    ticks = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f884 340c 	strb.w	r3, [r4, #1036]	; 0x40c
  }
}
 8002f78:	bd10      	pop	{r4, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200003ac 	.word	0x200003ac

08002f80 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 if (GPIO_Pin == KEY_BUTTON_PIN)
 8002f80:	2801      	cmp	r0, #1
 {
   ubKeyPressed = SET;
 8002f82:	bf04      	itt	eq
 8002f84:	4b01      	ldreq	r3, [pc, #4]	; (8002f8c <HAL_GPIO_EXTI_Callback+0xc>)
 8002f86:	f883 040d 	strbeq.w	r0, [r3, #1037]	; 0x40d
 }
}
 8002f8a:	4770      	bx	lr
 8002f8c:	200003ac 	.word	0x200003ac

08002f90 <Maze_Display>:
#include "stm32f429i_discovery_lcd.h"
#include <time.h>
#include <stdlib.h>
#include "stdint.h"

void Maze_Display(const int maze[], const int width, const int height, const int rectangle_side_size, uint32_t color) {
 8002f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	int i, j, top_left_rectangle_pixel_X = 0, top_left_rectangle_pixel_Y = 0;

	for(j = 0; j < height; j++)
 8002f94:	2400      	movs	r4, #0
void Maze_Display(const int maze[], const int width, const int height, const int rectangle_side_size, uint32_t color) {
 8002f96:	460e      	mov	r6, r1
 8002f98:	b085      	sub	sp, #20
 8002f9a:	4680      	mov	r8, r0
 8002f9c:	4692      	mov	sl, r2
	int i, j, top_left_rectangle_pixel_X = 0, top_left_rectangle_pixel_Y = 0;
 8002f9e:	4621      	mov	r1, r4
	for(j = 0; j < height; j++)
 8002fa0:	46a1      	mov	r9, r4
 8002fa2:	45d1      	cmp	r9, sl
 8002fa4:	da1b      	bge.n	8002fde <Maze_Display+0x4e>
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	eb08 0b84 	add.w	fp, r8, r4, lsl #2
	{
		for(i = 0; i < width; i++)
 8002fac:	462f      	mov	r7, r5
 8002fae:	e00f      	b.n	8002fd0 <Maze_Display+0x40>
		{
			int debug = maze[j * width + i];
 8002fb0:	f85b 2b04 	ldr.w	r2, [fp], #4
			if(debug == 1)
 8002fb4:	2a01      	cmp	r2, #1
 8002fb6:	d109      	bne.n	8002fcc <Maze_Display+0x3c>
			{
				LCD_Drawing_Rectangle(top_left_rectangle_pixel_X, top_left_rectangle_pixel_Y, rectangle_side_size, rectangle_side_size, color);
 8002fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fba:	9200      	str	r2, [sp, #0]
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8002fc4:	f000 f8a0 	bl	8003108 <LCD_Drawing_Rectangle>
 8002fc8:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
			}

			top_left_rectangle_pixel_X += rectangle_side_size;
 8002fcc:	441d      	add	r5, r3
		for(i = 0; i < width; i++)
 8002fce:	3701      	adds	r7, #1
 8002fd0:	42b7      	cmp	r7, r6
 8002fd2:	dbed      	blt.n	8002fb0 <Maze_Display+0x20>
      }

	  top_left_rectangle_pixel_X = 0;
	  top_left_rectangle_pixel_Y += rectangle_side_size;
 8002fd4:	4419      	add	r1, r3
	for(j = 0; j < height; j++)
 8002fd6:	f109 0901 	add.w	r9, r9, #1
 8002fda:	4434      	add	r4, r6
 8002fdc:	e7e1      	b.n	8002fa2 <Maze_Display+0x12>
   }
}
 8002fde:	b005      	add	sp, #20
 8002fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002fe4 <Maze_Carve>:
   /* Set up an entry and an exit. */
   array[16] = 0; //Maze entry
   array[(height - 1) * width + (width - 2)] = 0;
}

void Maze_Carve(int maze[], const int width, const int height, int x, int y, RNG_HandleTypeDef *hrng) {
 8002fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8002fec:	4606      	mov	r6, r0
 8002fee:	460f      	mov	r7, r1
   int x2, y2;
   int dx, dy;
   int dir, count;
   uint32_t generatedNumber;

   HAL_RNG_GenerateRandomNumber(hrng, &generatedNumber);
 8002ff0:	4650      	mov	r0, sl
 8002ff2:	a901      	add	r1, sp, #4
void Maze_Carve(int maze[], const int width, const int height, int x, int y, RNG_HandleTypeDef *hrng) {
 8002ff4:	4691      	mov	r9, r2
 8002ff6:	4698      	mov	r8, r3
   HAL_RNG_GenerateRandomNumber(hrng, &generatedNumber);
 8002ff8:	f7ff f987 	bl	800230a <HAL_RNG_GenerateRandomNumber>

   dir = generatedNumber % 4;
 8002ffc:	9a01      	ldr	r2, [sp, #4]

   count = 0;
 8002ffe:	2000      	movs	r0, #0
   dir = generatedNumber % 4;
 8003000:	f002 0203 	and.w	r2, r2, #3
   count = 0;
 8003004:	4683      	mov	fp, r0
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <Maze_Carve+0xa0>)
   while(count < 4) {
      dx = 0; dy = 0;
      switch(dir) {
 8003008:	2a03      	cmp	r2, #3
 800300a:	bf14      	ite	ne
 800300c:	f1c2 0401 	rsbne	r4, r2, #1
   count = 0;
 8003010:	2400      	moveq	r4, #0
      case 0:  dx = 1;  break;
      case 1:  dy = 1;  break;
      case 2:  dx = -1; break;
      default: dy = -1; break;
      }
      x1 = x + dx;
 8003012:	eb04 0c08 	add.w	ip, r4, r8
      y1 = y + dy;
      x2 = x1 + dx;
 8003016:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800301a:	bf14      	ite	ne
 800301c:	569d      	ldrsbne	r5, [r3, r2]
   count = 0;
 800301e:	f04f 35ff 	moveq.w	r5, #4294967295
      y2 = y1 + dy;
      if(   x2 > 0 && x2 < width && y2 > 0 && y2 < height
 8003022:	2c00      	cmp	r4, #0
 8003024:	dd25      	ble.n	8003072 <Maze_Carve+0x8e>
 8003026:	42bc      	cmp	r4, r7
 8003028:	da23      	bge.n	8003072 <Maze_Carve+0x8e>
      y1 = y + dy;
 800302a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800302c:	eb05 0e01 	add.w	lr, r5, r1
      y2 = y1 + dy;
 8003030:	eb01 0545 	add.w	r5, r1, r5, lsl #1
      if(   x2 > 0 && x2 < width && y2 > 0 && y2 < height
 8003034:	2d00      	cmp	r5, #0
 8003036:	dd1c      	ble.n	8003072 <Maze_Carve+0x8e>
 8003038:	454d      	cmp	r5, r9
 800303a:	da1a      	bge.n	8003072 <Maze_Carve+0x8e>
         && maze[y1 * width + x1] == 1 && maze[y2 * width + x2] == 1) {
 800303c:	fb07 cc0e 	mla	ip, r7, lr, ip
 8003040:	f856 102c 	ldr.w	r1, [r6, ip, lsl #2]
 8003044:	2901      	cmp	r1, #1
 8003046:	d114      	bne.n	8003072 <Maze_Carve+0x8e>
 8003048:	fb07 4e05 	mla	lr, r7, r5, r4
 800304c:	f856 102e 	ldr.w	r1, [r6, lr, lsl #2]
 8003050:	2901      	cmp	r1, #1
 8003052:	d10e      	bne.n	8003072 <Maze_Carve+0x8e>
         maze[y1 * width + x1] = 0;
 8003054:	f846 b02c 	str.w	fp, [r6, ip, lsl #2]
         maze[y2 * width + x2] = 0;
         x = x2; y = y2;
         HAL_RNG_GenerateRandomNumber(hrng, &generatedNumber);
 8003058:	a901      	add	r1, sp, #4
         maze[y2 * width + x2] = 0;
 800305a:	f846 b02e 	str.w	fp, [r6, lr, lsl #2]
         HAL_RNG_GenerateRandomNumber(hrng, &generatedNumber);
 800305e:	4650      	mov	r0, sl
 8003060:	f7ff f953 	bl	800230a <HAL_RNG_GenerateRandomNumber>
         dir = generatedNumber % 4;
 8003064:	9a01      	ldr	r2, [sp, #4]
 8003066:	950c      	str	r5, [sp, #48]	; 0x30
 8003068:	f002 0203 	and.w	r2, r2, #3
 800306c:	46a0      	mov	r8, r4
         count = 0;
 800306e:	2000      	movs	r0, #0
 8003070:	e7c9      	b.n	8003006 <Maze_Carve+0x22>
      } else {
         dir = (dir + 1) % 4;
         count += 1;
 8003072:	3001      	adds	r0, #1
         dir = (dir + 1) % 4;
 8003074:	3201      	adds	r2, #1
   while(count < 4) {
 8003076:	2804      	cmp	r0, #4
         dir = (dir + 1) % 4;
 8003078:	f002 0203 	and.w	r2, r2, #3
   while(count < 4) {
 800307c:	d1c4      	bne.n	8003008 <Maze_Carve+0x24>
      }
   }

}
 800307e:	b003      	add	sp, #12
 8003080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003084:	08006e90 	.word	0x08006e90

08003088 <Maze_Generate>:
void Maze_Generate(int array[], const int width, const int height, RNG_HandleTypeDef *hrng) {
 8003088:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800308c:	4615      	mov	r5, r2
 800308e:	469a      	mov	sl, r3
   for(x = 0; x < width * height; x++) {
 8003090:	fb02 f701 	mul.w	r7, r2, r1
void Maze_Generate(int array[], const int width, const int height, RNG_HandleTypeDef *hrng) {
 8003094:	4604      	mov	r4, r0
 8003096:	460e      	mov	r6, r1
   for(x = 0; x < width * height; x++) {
 8003098:	2200      	movs	r2, #0
 800309a:	2301      	movs	r3, #1
 800309c:	4297      	cmp	r7, r2
 800309e:	dc0b      	bgt.n	80030b8 <Maze_Generate+0x30>
   for(y = 1; y < height; y += 2) {
 80030a0:	f04f 0801 	mov.w	r8, #1
 80030a4:	45a8      	cmp	r8, r5
 80030a6:	db1a      	blt.n	80030de <Maze_Generate+0x56>
   array[(height - 1) * width + (width - 2)] = 0;
 80030a8:	3f02      	subs	r7, #2
   array[16] = 0; //Maze entry
 80030aa:	2300      	movs	r3, #0
 80030ac:	6423      	str	r3, [r4, #64]	; 0x40
   array[(height - 1) * width + (width - 2)] = 0;
 80030ae:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
}
 80030b2:	b002      	add	sp, #8
 80030b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	   array[x] = 1;
 80030b8:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   for(x = 0; x < width * height; x++) {
 80030bc:	3201      	adds	r2, #1
 80030be:	e7ed      	b.n	800309c <Maze_Generate+0x14>
    	  Maze_Carve(array, width, height, x, y, hrng);
 80030c0:	464b      	mov	r3, r9
 80030c2:	e9cd 8a00 	strd	r8, sl, [sp]
 80030c6:	462a      	mov	r2, r5
 80030c8:	4631      	mov	r1, r6
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff ff8a 	bl	8002fe4 <Maze_Carve>
      for(x = 1; x < width; x += 2) {
 80030d0:	f109 0902 	add.w	r9, r9, #2
 80030d4:	45b1      	cmp	r9, r6
 80030d6:	dbf3      	blt.n	80030c0 <Maze_Generate+0x38>
   for(y = 1; y < height; y += 2) {
 80030d8:	f108 0802 	add.w	r8, r8, #2
 80030dc:	e7e2      	b.n	80030a4 <Maze_Generate+0x1c>
      for(x = 1; x < width; x += 2) {
 80030de:	f04f 0901 	mov.w	r9, #1
 80030e2:	e7f7      	b.n	80030d4 <Maze_Generate+0x4c>

080030e4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80030e4:	4770      	bx	lr

080030e6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80030e6:	e7fe      	b.n	80030e6 <HardFault_Handler>

080030e8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <MemManage_Handler>

080030ea <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80030ea:	e7fe      	b.n	80030ea <BusFault_Handler>

080030ec <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80030ec:	e7fe      	b.n	80030ec <UsageFault_Handler>

080030ee <SVC_Handler>:
 80030ee:	4770      	bx	lr

080030f0 <DebugMon_Handler>:
 80030f0:	4770      	bx	lr

080030f2 <PendSV_Handler>:
 80030f2:	4770      	bx	lr

080030f4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80030f4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80030f6:	f7fe f83d 	bl	8001174 <HAL_IncTick>
  Toggle_Leds();
}
 80030fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Toggle_Leds();
 80030fe:	f7ff bf29 	b.w	8002f54 <Toggle_Leds>

08003102 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8003102:	2001      	movs	r0, #1
 8003104:	f7fe bbc4 	b.w	8001890 <HAL_GPIO_EXTI_IRQHandler>

08003108 <LCD_Drawing_Rectangle>:

#include "stm32f429i_discovery_lcd.h"
#include "lcd_drawing.h"

void LCD_Drawing_Rectangle(uint32_t x, uint32_t y, uint32_t width, uint32_t height, uint32_t color)
{
 8003108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800310c:	4604      	mov	r4, r0
 800310e:	460d      	mov	r5, r1
	BSP_LCD_SetTextColor(color);
 8003110:	9806      	ldr	r0, [sp, #24]
{
 8003112:	4616      	mov	r6, r2
 8003114:	461f      	mov	r7, r3
	BSP_LCD_SetTextColor(color);
 8003116:	f7fd fd13 	bl	8000b40 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, width, height);
 800311a:	b2bb      	uxth	r3, r7
 800311c:	b2b2      	uxth	r2, r6
 800311e:	b2a9      	uxth	r1, r5
 8003120:	b2a0      	uxth	r0, r4
}
 8003122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	BSP_LCD_FillRect(x, y, width, height);
 8003126:	f7fd bd4d 	b.w	8000bc4 <BSP_LCD_FillRect>
	...

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4d0d      	ldr	r5, [pc, #52]	; (8003164 <__libc_init_array+0x38>)
 8003130:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003132:	1b64      	subs	r4, r4, r5
 8003134:	10a4      	asrs	r4, r4, #2
 8003136:	2600      	movs	r6, #0
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	4d0b      	ldr	r5, [pc, #44]	; (800316c <__libc_init_array+0x40>)
 800313e:	4c0c      	ldr	r4, [pc, #48]	; (8003170 <__libc_init_array+0x44>)
 8003140:	f000 f818 	bl	8003174 <_init>
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	2600      	movs	r6, #0
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08006e9c 	.word	0x08006e9c
 8003168:	08006e9c 	.word	0x08006e9c
 800316c:	08006e9c 	.word	0x08006e9c
 8003170:	08006ea0 	.word	0x08006ea0

08003174 <_init>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr

08003180 <_fini>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr
